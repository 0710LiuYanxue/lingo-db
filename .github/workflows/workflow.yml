name: build+test

on: push

jobs:
  build-arrow:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: install dependencies
        run: |
          sudo apt-get install libjemalloc-dev libboost-dev \
                                 libboost-filesystem-dev \
                                 libboost-system-dev \
                                 libboost-regex-dev \
                                 python-dev \
                                 autoconf \
                                 flex \
                                 bison
          pip3 install numpy
      - name: Get arrow ommit id
        id: arrow-commit
        run: |
          echo "::set-output name=commit::$(git submodule status arrow | tr ' ' '-' )"
      - name: Cache Arrow Build
        id: arrow-build
        uses: actions/cache@v2
        with:
          path: arrow-build
          key: ${{ runner.os }}-arrow-build-with-python-${{ steps.arrow-commit.outputs.commit }}
      - uses: seanmiddleditch/gha-setup-ninja@master
      - name: Build Arrow
        if: steps.arrow-build.outputs.cache-hit != 'true'
        run: |
          git submodule init
          git submodule update arrow
          mkdir -p arrow-build
          cmake arrow/cpp  -B arrow-build -DARROW_GANDIVA=1 -DARROW_PYTHON=ON
          cmake --build arrow-build
          cmake --install arrow-build --prefix arrow-build/install
  build-pyarrow:
    runs-on: ubuntu-latest
    needs: [build-arrow]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.x'
          architecture: 'x64'
      - name: install dependencies
        run: |
          sudo apt-get install libjemalloc-dev libboost-dev \
                                 libboost-filesystem-dev \
                                 libboost-system-dev \
                                 libboost-regex-dev \
                                 python-dev \
                                 autoconf \
                                 flex \
                                 bison
          pip3 install numpy Cython
      - name: Get arrow commit id
        id: arrow-commit
        run: |
          echo "::set-output name=commit::$(git submodule status arrow | tr ' ' '-' )"
      - name: Cache Arrow Build
        id: arrow-build
        uses: actions/cache@v2
        with:
          path: arrow-build
          key: ${{ runner.os }}-arrow-build-with-python-${{ steps.arrow-commit.outputs.commit }}
      - name: Cache PyArrow Build
        id: pyarrow-build
        uses: actions/cache@v2
        with:
          path: arrow/python
          key: ${{ runner.os }}-pyarrow-2-${{ steps.arrow-commit.outputs.commit }}
      - uses: seanmiddleditch/gha-setup-ninja@master
      - name: Build Pyarrow
        if: steps.pyarrow-build.outputs.cache-hit != 'true'
        run: |
          git submodule init
          git submodule update arrow
          cd arrow/python; python3 setup.py build_ext --inplace --extra-cmake-args="-DArrow_DIR=/home/runner/work/db-dialects/db-dialects/arrow-build/install/lib/cmake/arrow -DArrowPython_DIR=/home/runner/work/db-dialects/db-dialects/arrow-build/install/lib/cmake/arrow"
  build-llvm:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Get llvm commit id
        id: llvm-commit
        run: |
          echo "::set-output name=commit::$(git submodule status llvm-project | tr ' ' '-' )"
      - name: Cache LLVM Build
        id: llvm-build
        uses: actions/cache@v2
        with:
          path: llvm-build
          key: ${{ runner.os }}-llvm-build-codegen-${{ steps.llvm-commit.outputs.commit }}
      - uses: seanmiddleditch/gha-setup-ninja@master
      - name: Build LLVM
        if: steps.llvm-build.outputs.cache-hit != 'true'
        run: |
          git submodule init
          git submodule update llvm-project
          git submodule update torch-mlir
          mkdir -p llvm-build
          cmake -G Ninja llvm-project/llvm  -B llvm-build \
          -DLLVM_ENABLE_PROJECTS="mlir" \
          -DLLVM_BUILD_EXAMPLES=OFF \
          -DLLVM_TARGETS_TO_BUILD="X86;NVPTX;AMDGPU" \
          -DCMAKE_BUILD_TYPE=Release \
          -DLLVM_ENABLE_ASSERTIONS=ON \
          -DPython3_FIND_VIRTUALENV=ONLY \
          -DLLVM_EXTERNAL_PROJECTS="torch-mlir;torch-mlir-dialects" \
          -DLLVM_EXTERNAL_TORCH_MLIR_SOURCE_DIR="/home/runner/work/db-dialects/db-dialects/torch-mlir" \
          -DLLVM_EXTERNAL_TORCH_MLIR_DIALECTS_SOURCE_DIR="/home/runner/work/db-dialects/db-dialects/torch-mlir/external/llvm-external-projects/torch-mlir-dialects" \
          -DMLIR_ENABLE_BINDINGS_PYTHON=ON
          cmake --build llvm-build
  build:
    needs: [build-llvm,build-arrow]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.x'
          architecture: 'x64'
      - name: install dependencies
        run: |
          sudo apt-get install libjemalloc-dev libboost-dev \
                                 libboost-filesystem-dev \
                                 libboost-system-dev \
                                 libboost-regex-dev \
                                 python-dev \
                                 autoconf \
                                 flex \
                                 bison
          pip3 install numpy
      - uses: actions/checkout@v2
      - uses: seanmiddleditch/gha-setup-ninja@master
      - name: Get arrow ommit id
        id: arrow-commit
        run: |
          echo "::set-output name=commit::$(git submodule status arrow | tr ' ' '-' )"
      - name: Cache Arrow Build
        id: arrow-build
        uses: actions/cache@v2
        with:
          path: arrow-build
          key: ${{ runner.os }}-arrow-build-with-python-${{ steps.arrow-commit.outputs.commit }}
      - name: Get llvm commit id
        id: llvm-commit
        run: |
          echo "::set-output name=commit::$(git submodule status llvm-project | tr ' ' '-' )"
      - name: Fetch LLVM Build
        id: llvm-build
        uses: actions/cache@v2
        with:
          path: llvm-build
          key: ${{ runner.os }}-llvm-build-codegen-${{ steps.llvm-commit.outputs.commit }}
      - name: Fetch Cached LLVM sources
        id: llvm-sources
        uses: actions/cache@v2
        with:
          path: llvm-project
          key: ${{ runner.os }}-llvm-sources-${{ steps.llvm-commit.outputs.commit }}
      - name: Clone LLVM sources
        if: steps.llvm-sources.outputs.cache-hit != 'true'
        run: |
          git submodule init
          git submodule update
      - name: Cache Build
        id: build
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ runner.os }}-build-${{ github.sha }}
      - name: Build
        run: |
          git submodule init
          git submodule update arrow
          git submodule update pybind11
          mkdir -p build 
          cmake -G Ninja . -B build\
           -DMLIR_DIR=llvm-build/lib/cmake/mlir\
           -DLLVM_EXTERNAL_LIT=/home/runner/work/db-dialects/db-dialects/llvm-build/bin/llvm-lit\
           -DArrow_DIR="/home/runner/work/db-dialects/db-dialects/arrow-build/install/lib/cmake/arrow"\
           -DGandiva_DIR="/home/runner/work/db-dialects/db-dialects/arrow-build/install/lib/cmake/arrow"\
           -DARROW_BUILD_DIR="/home/runner/work/db-dialects/db-dialects/arrow-build"\
           -DBoost_INCLUDE_DIR="/home/runner/work/db-dialects/db-dialects/arrow-build/boost_ep-prefix/src/boost_ep"\
           -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          cmake --build build
  filecheck-tests:
    needs: [build, build-pyarrow]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.x'
          architecture: 'x64'
      - name: Install Python packages
        run: |
          pip3 install requests moz_sql_parser numpy pandas
      - uses: seanmiddleditch/gha-setup-ninja@master
      - name: Get arrow ommit id
        id: arrow-commit
        run: |
          echo "::set-output name=commit::$(git submodule status arrow | tr ' ' '-' )"
      - name: Cache Arrow Build
        id: arrow-build
        uses: actions/cache@v2
        with:
          path: arrow-build
          key: ${{ runner.os }}-arrow-build-with-python-${{ steps.arrow-commit.outputs.commit }}
      - name: Cache Arrow Build
        id: pyarrow-build
        uses: actions/cache@v2
        with:
          path: arrow/python
          key: ${{ runner.os }}-pyarrow-2-${{ steps.arrow-commit.outputs.commit }}
      - name: Fetch LLVM Build
        id: llvm-build
        uses: actions/cache@v2
        with:
          path: llvm-build
          key: ${{ runner.os }}-llvm-build-codegen-${{ steps.llvm-commit.outputs.commit }}
      - name: Fetch Cached LLVM sources
        id: llvm-sources
        uses: actions/cache@v2
        with:
          path: llvm-project
          key: ${{ runner.os }}-llvm-sources-${{ steps.llvm-commit.outputs.commit }}
      - name: Fetch Cached Build
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ runner.os }}-build-${{ github.sha }}
      - name: Run Test
        run: |
          export LD_LIBRARY_PATH=/home/runner/work/db-dialects/db-dialects/arrow-build/install/lib && /home/runner/work/db-dialects/db-dialects/llvm-build/bin/llvm-lit -v build/test
  sql-tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Python packages
        run: |
          pip3 install requests moz_sql_parser
      - name: Get llvm commit id
        id: llvm-commit
        run: |
          echo "::set-output name=commit::$(git submodule status llvm-project | tr ' ' '-' )"
      - name: Fetch LLVM Build
        id: llvm-build
        uses: actions/cache@v2
        with:
          path: llvm-build
          key: ${{ runner.os }}-llvm-build-codegen-${{ steps.llvm-commit.outputs.commit }}
      - name: Fetch Cached LLVM sources
        id: llvm-sources
        uses: actions/cache@v2
        with:
          path: llvm-project
          key: ${{ runner.os }}-llvm-sources-${{ steps.llvm-commit.outputs.commit }}
      - name: Get arrow ommit id
        id: arrow-commit
        run: |
          echo "::set-output name=commit::$(git submodule status arrow | tr ' ' '-' )"
      - name: Cache Arrow Build
        id: arrow-build
        uses: actions/cache@v2
        with:
          path: arrow-build
          key: ${{ runner.os }}-arrow-build-with-python-${{ steps.arrow-commit.outputs.commit }}
      - name: Fetch Cached Build
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ runner.os }}-build-${{ github.sha }}
      - name: Run Test
        run: |
          python3 tools/sql-roundtrip-tests/test.py build
  lint:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: install dependencies
        run: |
          sudo apt-get install libjemalloc-dev libboost-dev \
                                 libboost-filesystem-dev \
                                 libboost-system-dev \
                                 libboost-regex-dev \
                                 python-dev \
                                 autoconf \
                                 flex \
                                 bison
          pip3 install numpy
      - uses: actions/checkout@v2
      - name: Get arrow ommit id
        id: arrow-commit
        run: |
          echo "::set-output name=commit::$(git submodule status arrow | tr ' ' '-' )"
      - name: Cache Arrow Build
        id: arrow-build
        uses: actions/cache@v2
        with:
          path: arrow-build
          key: ${{ runner.os }}-arrow-build-with-python-${{ steps.arrow-commit.outputs.commit }}
      - name: Install clang-tidy
        run: |
          sudo apt-get install -y clang-tidy
      - name: Get llvm commit id
        id: llvm-commit
        run: |
          echo "::set-output name=commit::$(git submodule status llvm-project | tr ' ' '-' )"
      - name: Fetch Cached LLVM sources
        id: llvm-sources
        uses: actions/cache@v2
        with:
          path: llvm-project
          key: ${{ runner.os }}-llvm-sources-${{ steps.llvm-commit.outputs.commit }}
      - name: Fetch LLVM Build
        id: llvm-build
        uses: actions/cache@v2
        with:
          path: llvm-build
          key: ${{ runner.os }}-llvm-build-codegen-${{ steps.llvm-commit.outputs.commit }}
      - name: Fetch Cached Build
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ runner.os }}-build-${{ github.sha }}
      - name: Run Test
        run: |
          git submodule init
          git submodule update pybind11
          python3 tools/scripts/run-clang-tidy.py -p build/ -quiet  -exclude="arrow" -header-filter="$PWD/include/.*"
      
