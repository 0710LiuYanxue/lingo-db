name: build+test

on: push

jobs:
  build-llvm:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Get llvm commit id
        id: llvm-commit
        run: |
          echo "::set-output name=commit::$(git submodule status llvm-project | tr ' ' '-' )"
      - name: Cache LLVM Build
        id: llvm-build
        uses: actions/cache@v2
        with:
          path: llvm-build
          key: ${{ runner.os }}-llvm-build-codegen-${{ steps.llvm-commit.outputs.commit }}
      - uses: seanmiddleditch/gha-setup-ninja@master
      - name: Build LLVM
        if: steps.llvm-build.outputs.cache-hit != 'true'
        run: |
          git submodule init
          git submodule update
          mkdir -p llvm-build
          cmake -G Ninja llvm-project/llvm  -B llvm-build \
          -DLLVM_ENABLE_PROJECTS="mlir" \
          -DLLVM_BUILD_EXAMPLES=OFF \
          -DLLVM_TARGETS_TO_BUILD="X86;NVPTX;AMDGPU" \
          -DCMAKE_BUILD_TYPE=Release \
          -DLLVM_ENABLE_ASSERTIONS=ON
          cmake --build llvm-build
  build:
    needs: build-llvm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: seanmiddleditch/gha-setup-ninja@master
      - name: Install Apache Arrows
        run: |
          bash tools/scripts/install-apache-arrow.sh
      - name: Get llvm commit id
        id: llvm-commit
        run: |
          echo "::set-output name=commit::$(git submodule status llvm-project | tr ' ' '-' )"
      - name: Fetch LLVM Build
        id: llvm-build
        uses: actions/cache@v2
        with:
          path: llvm-build
          key: ${{ runner.os }}-llvm-build-codegen-${{ steps.llvm-commit.outputs.commit }}
      - name: Fetch Cached LLVM sources
        id: llvm-sources
        uses: actions/cache@v2
        with:
          path: llvm-project
          key: ${{ runner.os }}-llvm-sources-${{ steps.llvm-commit.outputs.commit }}
      - name: Clone LLVM sources
        if: steps.llvm-sources.outputs.cache-hit != 'true'
        run: |
          git submodule init
          git submodule update
      - name: Cache Build
        id: build
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ runner.os }}-build-${{ github.sha }}
      - name: Build
        run: |
          mkdir -p build 
          cmake -G Ninja . -B build  -DMLIR_DIR=llvm-build/lib/cmake/mlir -DLLVM_EXTERNAL_LIT=/home/runner/work/db-dialects/db-dialects/llvm-build/bin/llvm-lit -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          cmake --build build
  filecheck-tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: seanmiddleditch/gha-setup-ninja@master
      - name: Fetch LLVM Build
        id: llvm-build
        uses: actions/cache@v2
        with:
          path: llvm-build
          key: ${{ runner.os }}-llvm-build-codegen-${{ steps.llvm-commit.outputs.commit }}
      - name: Fetch Cached LLVM sources
        id: llvm-sources
        uses: actions/cache@v2
        with:
          path: llvm-project
          key: ${{ runner.os }}-llvm-sources-${{ steps.llvm-commit.outputs.commit }}
      - name: Fetch Cached Build
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ runner.os }}-build-${{ github.sha }}
      - name: Run Test
        run: |
          /home/runner/work/db-dialects/db-dialects/llvm-build/bin/llvm-lit build/test
  sql-tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Python packages
        run: |
          pip3 install requests moz_sql_parser
      - name: Fetch LLVM Build
        id: llvm-build
        uses: actions/cache@v2
        with:
          path: llvm-build
          key: ${{ runner.os }}-llvm-build-codegen-${{ steps.llvm-commit.outputs.commit }}
      - name: Fetch Cached LLVM sources
        id: llvm-sources
        uses: actions/cache@v2
        with:
          path: llvm-project
          key: ${{ runner.os }}-llvm-sources-${{ steps.llvm-commit.outputs.commit }}
      - name: Fetch Cached Build
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ runner.os }}-build-${{ github.sha }}
      - name: Run Test
        run: |
          python3 tools/sql-roundtrip-tests/test.py build
  lint:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install clang-tidy
        run: |
          sudo apt-get install -y clang-tidy
      - name: Fetch Cached LLVM sources
        id: llvm-sources
        uses: actions/cache@v2
        with:
          path: llvm-project
          key: ${{ runner.os }}-llvm-sources-${{ steps.llvm-commit.outputs.commit }}
      - name: Fetch LLVM Build
        id: llvm-build
        uses: actions/cache@v2
        with:
          path: llvm-build
          key: ${{ runner.os }}-llvm-build-codegen-${{ steps.llvm-commit.outputs.commit }}
      - name: Fetch Cached Build
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ runner.os }}-build-${{ github.sha }}
      - name: Run Test
        run: |
          python3 tools/scripts/run-clang-tidy.py -p build/ -quiet
      
