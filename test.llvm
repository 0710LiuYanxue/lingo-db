; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@global_str_const_8 = private constant [59 x i8] c"{ \22table\22: \22region\22, \22columns\22: [ \22r_name\22,\22r_regionkey\22] }"
@global_str_const_7 = private constant [64 x i8] c"{ \22table\22: \22nation\22, \22columns\22: [ \22n_nationkey\22,\22n_regionkey\22] }"
@global_str_const_6 = private constant [64 x i8] c"{ \22table\22: \22supplier\22, \22columns\22: [ \22s_nationkey\22,\22s_suppkey\22] }"
@global_str_const_5 = private constant [59 x i8] c"{ \22table\22: \22region\22, \22columns\22: [ \22r_name\22,\22r_regionkey\22] }"
@global_str_const_4 = private constant [73 x i8] c"{ \22table\22: \22nation\22, \22columns\22: [ \22n_name\22,\22n_nationkey\22,\22n_regionkey\22] }"
@global_str_const_3 = private constant [119 x i8] c"{ \22table\22: \22supplier\22, \22columns\22: [ \22s_acctbal\22,\22s_address\22,\22s_comment\22,\22s_name\22,\22s_nationkey\22,\22s_phone\22,\22s_suppkey\22] }"
@global_str_const_2 = private constant [73 x i8] c"{ \22table\22: \22part\22, \22columns\22: [ \22p_mfgr\22,\22p_partkey\22,\22p_size\22,\22p_type\22] }"
@global_str_const_1 = private constant [80 x i8] c"{ \22table\22: \22partsupp\22, \22columns\22: [ \22ps_partkey\22,\22ps_suppkey\22,\22ps_supplycost\22] }"
@global_str_const_0 = private constant [80 x i8] c"{ \22table\22: \22partsupp\22, \22columns\22: [ \22ps_partkey\22,\22ps_suppkey\22,\22ps_supplycost\22] }"
@execution_context = dso_local local_unnamed_addr global i8* null, align 8

declare i8* @malloc(i64 %0)

declare void @free(i8* %0)

declare void @rt_table_builder_finish_row(i8* %0)

declare void @rt_table_builder_add_int_32(i8* %0, i32 %1, i1 %2, i32 %3)

declare void @rt_table_builder_add_binary(i8* %0, i32 %1, i1 %2, { i64, i64 } %3)

declare void @rt_table_builder_add_small_decimal(i8* %0, i32 %1, i1 %2, i64 %3)

declare i8* @rt_arrow_create_table_builder(i8* %0)

declare i8* @rt_arrow_schema_build(i8* %0)

declare void @rt_arrow_schema_add_field(i8* %0, i8* %1, i1 %2, { i64, i64 } %3)

declare i8* @rt_arrow_type2(i32 %0, i32 %1, i32 %2)

declare i8* @rt_arrow_schema_create_builder()

declare void @rt_resize_aggr_ht(i8* %0, i64 %1)

declare i8* @rt_create_aggr_ht(i64 %0, i64 %1)

declare void @rt_resize_vec(i8* %0)

declare i1 @rt_cmp_string_ends_with(i1 %0, { i64, i64 } %1, { i64, i64 } %2)

declare i64 @rt_table_chunk_num_rows(i8* %0)

declare i8* @rt_table_chunk_get_column_buffer(i8* %0, i64 %1, i64 %2)

declare void @rt_table_chunk_iterator_free(i8* %0)

declare i8* @rt_table_chunk_iterator_next(i8* %0)

declare i8* @rt_table_chunk_iterator_curr(i8* %0)

declare i1 @rt_table_chunk_iterator_valid(i8* %0)

declare i8* @rt_table_chunk_iterator_init(i8* %0)

declare i8* @rt_create_vec(i64 %0, i64 %1)

declare i8* @rt_scan_source_init(i8* %0, { i64, i64 } %1)

declare i8* @rt_build_join_ht(i8* %0, i64 %1)

declare i1 @rt_cmp_string_eq(i1 %0, { i64, i64 } %1, { i64, i64 } %2)

declare i1 @rt_cmp_string_lt(i1 %0, { i64, i64 } %1, { i64, i64 } %2)

declare void @rt_sort(i64 %0, i8* %1, i64 %2, i1 (i8*, i8*)* %3)

define i1 @db_sort_compare0(i8* %0, i8* %1) {
  %3 = bitcast i8* %0 to { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*
  %4 = bitcast i8* %1 to { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*
  %5 = load { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }, { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }* %3, align 4
  %6 = load { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }, { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }* %4, align 4
  %7 = extractvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %5, 0
  %8 = extractvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %5, 1
  %9 = extractvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %5, 2
  %10 = extractvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %5, 3
  %11 = extractvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %6, 0
  %12 = extractvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %6, 1
  %13 = extractvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %6, 2
  %14 = extractvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %6, 3
  %15 = icmp slt i64 %11, %7
  br i1 %15, label %28, label %16

16:                                               ; preds = %2
  %17 = icmp eq i64 %11, %7
  br i1 %17, label %18, label %28

18:                                               ; preds = %16
  %19 = call i1 @rt_cmp_string_lt(i1 false, { i64, i64 } %9, { i64, i64 } %13)
  br i1 %19, label %28, label %20

20:                                               ; preds = %18
  %21 = call i1 @rt_cmp_string_eq(i1 false, { i64, i64 } %9, { i64, i64 } %13)
  br i1 %21, label %22, label %28

22:                                               ; preds = %20
  %23 = call i1 @rt_cmp_string_lt(i1 false, { i64, i64 } %8, { i64, i64 } %12)
  br i1 %23, label %28, label %24

24:                                               ; preds = %22
  %25 = call i1 @rt_cmp_string_eq(i1 false, { i64, i64 } %8, { i64, i64 } %12)
  %26 = icmp slt i32 %10, %14
  %27 = select i1 %25, i1 %26, i1 false
  br label %28

28:                                               ; preds = %22, %24, %20, %18, %16, %2
  %29 = phi i1 [ true, %2 ], [ true, %18 ], [ %27, %24 ], [ true, %22 ], [ false, %20 ], [ false, %16 ]
  ret i1 %29
}

declare i8* @rt_table_builder_build(i8* %0)

; Function Attrs: noinline optnone
define i8* @pipeline_fn_0_finalize_0(i8* %0) #0 {
  %2 = call i8* @rt_table_builder_build(i8* %0)
  ret i8* %2
}

; Function Attrs: noinline optnone
define { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* @pipeline_fn_1_finalize_0({ i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* %0) #0 {
  %2 = load { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }, { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* %0, align 8
  %3 = extractvalue { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } } %2, 0
  %4 = extractvalue { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } } %2, 2
  %5 = extractvalue { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } %4, 0
  %6 = bitcast { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }* %5 to i8*
  call void @rt_sort(i64 %3, i8* %6, i64 112, i1 (i8*, i8*)* @db_sort_compare0)
  ret { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* %0
}

; Function Attrs: noinline optnone
define { { { i8*, { { i32 }, { { i1, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i1, i64 } } } }**, i64 }, i64 }* @pipeline_fn_2_finalize_0({ i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }* %0) #0 {
  %2 = bitcast { i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }* %0 to i8*
  %3 = call i8* @rt_build_join_ht(i8* %2, i64 32)
  %4 = bitcast i8* %3 to { { { i8*, { { i32 }, { { i1, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i1, i64 } } } }**, i64 }, i64 }*
  ret { { { i8*, { { i32 }, { { i1, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i1, i64 } } } }**, i64 }, i64 }* %4
}

; Function Attrs: noinline optnone
define { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* @pipeline_fn_3_finalize_0({ i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %0) #0 {
  ret { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %0
}

; Function Attrs: noinline optnone
define { i8*, i64, i64, i64 }* @pipeline_fn_3_init_1() #0 {
  %1 = call i8* @rt_get_execution_context()
  %2 = call i8* @rt_scan_source_init(i8* %1, { i64, i64 } { i64 8368286770260869200, i64 ptrtoint ([80 x i8]* @global_str_const_0 to i64) })
  %3 = bitcast i8* %2 to { i8*, i64, i64, i64 }*
  ret { i8*, i64, i64, i64 }* %3
}

; Function Attrs: noinline optnone
define { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* @pipeline_fn_7_finalize_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0) #0 {
  %2 = bitcast { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0 to i8*
  %3 = call i8* @rt_build_join_ht(i8* %2, i64 16)
  %4 = bitcast i8* %3 to { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }*
  ret { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %4
}

; Function Attrs: noinline optnone
define { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* @pipeline_fn_8_finalize_0({ i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %0) #0 {
  ret { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %0
}

; Function Attrs: noinline optnone
define { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* @pipeline_fn_9_finalize_0({ i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %0) #0 {
  ret { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %0
}

; Function Attrs: noinline optnone
define { i8*, i64, i64, i64 }* @pipeline_fn_9_init_1() #0 {
  %1 = call i8* @rt_get_execution_context()
  %2 = call i8* @rt_scan_source_init(i8* %1, { i64, i64 } { i64 8368286770260869200, i64 ptrtoint ([80 x i8]* @global_str_const_1 to i64) })
  %3 = bitcast i8* %2 to { i8*, i64, i64, i64 }*
  ret { i8*, i64, i64, i64 }* %3
}

; Function Attrs: noinline optnone
define { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* @pipeline_fn_13_finalize_0({ i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %0) #0 {
  %2 = bitcast { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %0 to i8*
  %3 = call i8* @rt_build_join_ht(i8* %2, i64 32)
  %4 = bitcast i8* %3 to { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }*
  ret { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* %4
}

; Function Attrs: noinline optnone
define { i8*, i64, i64, i64, i64 }* @pipeline_fn_13_init_1() #0 {
  %1 = call i8* @rt_get_execution_context()
  %2 = call i8* @rt_scan_source_init(i8* %1, { i64, i64 } { i64 8368286770260869193, i64 ptrtoint ([73 x i8]* @global_str_const_2 to i64) })
  %3 = bitcast i8* %2 to { i8*, i64, i64, i64, i64 }*
  ret { i8*, i64, i64, i64, i64 }* %3
}

; Function Attrs: noinline optnone
define { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* @pipeline_fn_13_init_0() #0 {
  %1 = call i8* @rt_create_vec(i64 32, i64 1024)
  %2 = bitcast i8* %1 to { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }*
  ret { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %2
}

define { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* @pipeline_fn_13_main_0({ i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %0, { i8*, i64, i64, i64, i64 }* %1) {
  %.elt = getelementptr inbounds { i8*, i64, i64, i64, i64 }, { i8*, i64, i64, i64, i64 }* %1, i64 0, i32 0
  %.unpack = load i8*, i8** %.elt, align 8
  %.elt1 = getelementptr inbounds { i8*, i64, i64, i64, i64 }, { i8*, i64, i64, i64, i64 }* %1, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.elt3 = getelementptr inbounds { i8*, i64, i64, i64, i64 }, { i8*, i64, i64, i64, i64 }* %1, i64 0, i32 2
  %.unpack4 = load i64, i64* %.elt3, align 8
  %.elt5 = getelementptr inbounds { i8*, i64, i64, i64, i64 }, { i8*, i64, i64, i64, i64 }* %1, i64 0, i32 3
  %.unpack6 = load i64, i64* %.elt5, align 8
  %.elt7 = getelementptr inbounds { i8*, i64, i64, i64, i64 }, { i8*, i64, i64, i64, i64 }* %1, i64 0, i32 4
  %.unpack8 = load i64, i64* %.elt7, align 8
  %3 = call i8* @rt_table_chunk_iterator_init(i8* %.unpack)
  br label %4

4:                                                ; preds = %74, %2
  %5 = phi i8* [ %75, %74 ], [ %3, %2 ]
  %6 = call i1 @rt_table_chunk_iterator_valid(i8* %5)
  br i1 %6, label %7, label %76

7:                                                ; preds = %4
  %8 = call i8* @rt_table_chunk_iterator_curr(i8* %5)
  %9 = call i8* @rt_table_chunk_get_column_buffer(i8* %8, i64 %.unpack2, i64 1)
  %10 = bitcast i8* %9 to i32*
  %11 = call i8* @rt_table_chunk_get_column_buffer(i8* %8, i64 %.unpack2, i64 2)
  %12 = call i8* @rt_table_chunk_get_column_buffer(i8* %8, i64 %.unpack4, i64 1)
  %13 = bitcast i8* %12 to i32*
  %14 = call i8* @rt_table_chunk_get_column_buffer(i8* %8, i64 %.unpack6, i64 1)
  %15 = bitcast i8* %14 to i32*
  %16 = call i8* @rt_table_chunk_get_column_buffer(i8* %8, i64 %.unpack8, i64 1)
  %17 = bitcast i8* %16 to i32*
  %18 = call i8* @rt_table_chunk_get_column_buffer(i8* %8, i64 %.unpack8, i64 2)
  %19 = call i64 @rt_table_chunk_num_rows(i8* %8)
  br label %20

20:                                               ; preds = %73, %7
  %21 = phi i64 [ %.pre-phi, %73 ], [ 0, %7 ]
  %22 = icmp slt i64 %21, %19
  br i1 %22, label %23, label %74

23:                                               ; preds = %20
  %24 = getelementptr i32, i32* %15, i64 %21
  %25 = load i32, i32* %24, align 4
  %.not = icmp eq i32 %25, 15
  br i1 %.not, label %26, label %._crit_edge

._crit_edge:                                      ; preds = %23
  %.pre = add i64 %21, 1
  br label %73

26:                                               ; preds = %23
  %27 = add i64 %21, 1
  %28 = getelementptr i32, i32* %17, i64 %21
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr i32, i32* %17, i64 %27
  %31 = load i32, i32* %30, align 4
  %32 = sext i32 %29 to i64
  %33 = sub i32 %31, %29
  %34 = getelementptr i8, i8* %18, i64 %32
  %35 = or i32 %33, -2147483648
  %36 = zext i32 %35 to i64
  %37 = ptrtoint i8* %34 to i64
  %38 = insertvalue { i64, i64 } undef, i64 %36, 0
  %39 = insertvalue { i64, i64 } %38, i64 %37, 1
  %40 = call i1 @rt_cmp_string_ends_with(i1 false, { i64, i64 } %39, { i64, i64 } { i64 5999166622055530501, i64 83 })
  br i1 %40, label %41, label %73

41:                                               ; preds = %26
  %42 = getelementptr i32, i32* %10, i64 %21
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr i32, i32* %10, i64 %27
  %45 = load i32, i32* %44, align 4
  %46 = sext i32 %43 to i64
  %47 = sub i32 %45, %43
  %48 = getelementptr i8, i8* %11, i64 %46
  %49 = getelementptr i32, i32* %13, i64 %21
  %50 = load i32, i32* %49, align 4
  %51 = or i32 %47, -2147483648
  %52 = zext i32 %51 to i64
  %53 = ptrtoint i8* %48 to i64
  %54 = insertvalue { i64, i64 } undef, i64 %52, 0
  %55 = insertvalue { i64, i64 } %54, i64 %53, 1
  %56 = insertvalue { i32 } undef, i32 %50, 0
  %57 = insertvalue { { i64, i64 } } undef, { i64, i64 } %55, 0
  %58 = insertvalue { { i32 }, { { i64, i64 } } } undef, { i32 } %56, 0
  %59 = insertvalue { { i32 }, { { i64, i64 } } } %58, { { i64, i64 } } %57, 1
  %60 = sext i32 %50 to i64
  %61 = mul i64 %60, -7046029254386353067
  %62 = call i64 @llvm.bswap.i64(i64 %61)
  %63 = xor i64 %62, %61
  %64 = getelementptr { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }, { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %0, i64 0, i32 0
  %65 = getelementptr { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }, { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %0, i64 0, i32 1
  %66 = load i64, i64* %64, align 4
  %67 = load i64, i64* %65, align 4
  %68 = icmp ult i64 %66, %67
  br i1 %68, label %71, label %69

69:                                               ; preds = %41
  %70 = bitcast { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %0 to i8*
  call void @rt_resize_vec(i8* %70)
  br label %71

71:                                               ; preds = %41, %69
  %.elt9 = getelementptr { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }, { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %0, i64 0, i32 2, i32 0
  %.unpack10 = load { i64, { { i32 }, { { i64, i64 } } } }*, { i64, { { i32 }, { { i64, i64 } } } }** %.elt9, align 8
  %.repack = getelementptr { i64, { { i32 }, { { i64, i64 } } } }, { i64, { { i32 }, { { i64, i64 } } } }* %.unpack10, i64 %66, i32 0
  store i64 %63, i64* %.repack, align 4
  %.repack14 = getelementptr { i64, { { i32 }, { { i64, i64 } } } }, { i64, { { i32 }, { { i64, i64 } } } }* %.unpack10, i64 %66, i32 1
  store { { i32 }, { { i64, i64 } } } %59, { { i32 }, { { i64, i64 } } }* %.repack14, align 4
  %72 = add i64 %66, 1
  store i64 %72, i64* %64, align 4
  br label %73

73:                                               ; preds = %._crit_edge, %71, %26
  %.pre-phi = phi i64 [ %.pre, %._crit_edge ], [ %27, %71 ], [ %27, %26 ]
  br label %20

74:                                               ; preds = %20
  %75 = call i8* @rt_table_chunk_iterator_next(i8* %5)
  br label %4

76:                                               ; preds = %4
  call void @rt_table_chunk_iterator_free(i8* %5)
  ret { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %0
}

; Function Attrs: noinline optnone
define { { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }**, i64 }, i64 }* @pipeline_fn_10_finalize_0({ i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }* %0) #0 {
  %2 = bitcast { i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }* %0 to i8*
  %3 = call i8* @rt_build_join_ht(i8* %2, i64 104)
  %4 = bitcast i8* %3 to { { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }**, i64 }, i64 }*
  ret { { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }**, i64 }, i64 }* %4
}

; Function Attrs: noinline optnone
define { i8*, i64, i64, i64, i64, i64, i64, i64 }* @pipeline_fn_10_init_1() #0 {
  %1 = call i8* @rt_get_execution_context()
  %2 = call i8* @rt_scan_source_init(i8* %1, { i64, i64 } { i64 8368286770260869239, i64 ptrtoint ([119 x i8]* @global_str_const_3 to i64) })
  %3 = bitcast i8* %2 to { i8*, i64, i64, i64, i64, i64, i64, i64 }*
  ret { i8*, i64, i64, i64, i64, i64, i64, i64 }* %3
}

; Function Attrs: noinline optnone
define { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* @pipeline_fn_11_finalize_0({ i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %0) #0 {
  %2 = bitcast { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %0 to i8*
  %3 = call i8* @rt_build_join_ht(i8* %2, i64 32)
  %4 = bitcast i8* %3 to { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }*
  ret { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* %4
}

; Function Attrs: noinline optnone
define { i8*, i64, i64, i64 }* @pipeline_fn_11_init_1() #0 {
  %1 = call i8* @rt_get_execution_context()
  %2 = call i8* @rt_scan_source_init(i8* %1, { i64, i64 } { i64 8368286770260869193, i64 ptrtoint ([73 x i8]* @global_str_const_4 to i64) })
  %3 = bitcast i8* %2 to { i8*, i64, i64, i64 }*
  ret { i8*, i64, i64, i64 }* %3
}

; Function Attrs: noinline optnone
define { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* @pipeline_fn_12_finalize_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0) #0 {
  %2 = bitcast { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0 to i8*
  %3 = call i8* @rt_build_join_ht(i8* %2, i64 16)
  %4 = bitcast i8* %3 to { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }*
  ret { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %4
}

; Function Attrs: noinline optnone
define { i8*, i64, i64 }* @pipeline_fn_12_init_1() #0 {
  %1 = call i8* @rt_get_execution_context()
  %2 = call i8* @rt_scan_source_init(i8* %1, { i64, i64 } { i64 8368286770260869179, i64 ptrtoint ([59 x i8]* @global_str_const_5 to i64) })
  %3 = bitcast i8* %2 to { i8*, i64, i64 }*
  ret { i8*, i64, i64 }* %3
}

; Function Attrs: noinline optnone
define { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_12_init_0() #0 {
  %1 = call i8* @rt_create_vec(i64 16, i64 1024)
  %2 = bitcast i8* %1 to { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }*
  ret { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %2
}

define { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_12_main_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, { i8*, i64, i64 }* %1) {
  %.elt = getelementptr inbounds { i8*, i64, i64 }, { i8*, i64, i64 }* %1, i64 0, i32 0
  %.unpack = load i8*, i8** %.elt, align 8
  %.elt1 = getelementptr inbounds { i8*, i64, i64 }, { i8*, i64, i64 }* %1, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.elt3 = getelementptr inbounds { i8*, i64, i64 }, { i8*, i64, i64 }* %1, i64 0, i32 2
  %.unpack4 = load i64, i64* %.elt3, align 8
  %3 = call i8* @rt_table_chunk_iterator_init(i8* %.unpack)
  br label %4

4:                                                ; preds = %55, %2
  %5 = phi i8* [ %56, %55 ], [ %3, %2 ]
  %6 = call i1 @rt_table_chunk_iterator_valid(i8* %5)
  br i1 %6, label %7, label %57

7:                                                ; preds = %4
  %8 = call i8* @rt_table_chunk_iterator_curr(i8* %5)
  %9 = call i8* @rt_table_chunk_get_column_buffer(i8* %8, i64 %.unpack2, i64 1)
  %10 = bitcast i8* %9 to i32*
  %11 = call i8* @rt_table_chunk_get_column_buffer(i8* %8, i64 %.unpack2, i64 2)
  %12 = call i8* @rt_table_chunk_get_column_buffer(i8* %8, i64 %.unpack4, i64 1)
  %13 = bitcast i8* %12 to i32*
  %14 = call i64 @rt_table_chunk_num_rows(i8* %8)
  br label %15

15:                                               ; preds = %54, %7
  %16 = phi i64 [ %21, %54 ], [ 0, %7 ]
  %17 = icmp slt i64 %16, %14
  br i1 %17, label %18, label %55

18:                                               ; preds = %15
  %19 = getelementptr i32, i32* %10, i64 %16
  %20 = load i32, i32* %19, align 4
  %21 = add i64 %16, 1
  %22 = getelementptr i32, i32* %10, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = sub i32 %23, %20
  %25 = sext i32 %20 to i64
  %26 = getelementptr i8, i8* %11, i64 %25
  %27 = or i32 %24, -2147483648
  %28 = zext i32 %27 to i64
  %29 = ptrtoint i8* %26 to i64
  %30 = insertvalue { i64, i64 } undef, i64 %28, 0
  %31 = insertvalue { i64, i64 } %30, i64 %29, 1
  %32 = call i1 @rt_cmp_string_eq(i1 false, { i64, i64 } %31, { i64, i64 } { i64 5715724631927685126, i64 17744 })
  br i1 %32, label %33, label %54

33:                                               ; preds = %18
  %34 = getelementptr i32, i32* %13, i64 %16
  %35 = load i32, i32* %34, align 4
  %36 = insertvalue { i32 } undef, i32 %35, 0
  %37 = insertvalue { { i32 }, {} } undef, { i32 } %36, 0
  %38 = sext i32 %35 to i64
  %39 = mul i64 %38, -7046029254386353067
  %40 = call i64 @llvm.bswap.i64(i64 %39)
  %41 = xor i64 %40, %39
  %42 = insertvalue { i64, { { i32 }, {} } } undef, i64 %41, 0
  %43 = insertvalue { i64, { { i32 }, {} } } %42, { { i32 }, {} } %37, 1
  %44 = getelementptr { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }, { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, i64 0, i32 0
  %45 = getelementptr { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }, { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, i64 0, i32 1
  %46 = load i64, i64* %44, align 4
  %47 = load i64, i64* %45, align 4
  %48 = icmp ult i64 %46, %47
  br i1 %48, label %51, label %49

49:                                               ; preds = %33
  %50 = bitcast { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0 to i8*
  call void @rt_resize_vec(i8* %50)
  br label %51

51:                                               ; preds = %33, %49
  %.elt5 = getelementptr { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }, { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, i64 0, i32 2, i32 0
  %.unpack6 = load { i64, { { i32 }, {} } }*, { i64, { { i32 }, {} } }** %.elt5, align 8
  %52 = getelementptr { i64, { { i32 }, {} } }, { i64, { { i32 }, {} } }* %.unpack6, i64 %46
  store { i64, { { i32 }, {} } } %43, { i64, { { i32 }, {} } }* %52, align 4
  %53 = add i64 %46, 1
  store i64 %53, i64* %44, align 4
  br label %54

54:                                               ; preds = %51, %18
  br label %15

55:                                               ; preds = %15
  %56 = call i8* @rt_table_chunk_iterator_next(i8* %5)
  br label %4

57:                                               ; preds = %4
  call void @rt_table_chunk_iterator_free(i8* %5)
  ret { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0
}

; Function Attrs: noinline optnone
define { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* @pipeline_fn_11_init_0() #0 {
  %1 = call i8* @rt_create_vec(i64 32, i64 1024)
  %2 = bitcast i8* %1 to { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }*
  ret { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %2
}

define { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* @pipeline_fn_11_main_0({ i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %0, { i8*, i64, i64, i64 }* %1, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %2, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %3) {
  %.elt = getelementptr inbounds { i8*, i64, i64, i64 }, { i8*, i64, i64, i64 }* %1, i64 0, i32 0
  %.unpack = load i8*, i8** %.elt, align 8
  %.elt1 = getelementptr inbounds { i8*, i64, i64, i64 }, { i8*, i64, i64, i64 }* %1, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.elt3 = getelementptr inbounds { i8*, i64, i64, i64 }, { i8*, i64, i64, i64 }* %1, i64 0, i32 2
  %.unpack4 = load i64, i64* %.elt3, align 8
  %.elt5 = getelementptr inbounds { i8*, i64, i64, i64 }, { i8*, i64, i64, i64 }* %1, i64 0, i32 3
  %.unpack6 = load i64, i64* %.elt5, align 8
  %5 = call i8* @rt_table_chunk_iterator_init(i8* %.unpack)
  br label %6

6:                                                ; preds = %71, %4
  %7 = phi i8* [ %72, %71 ], [ %5, %4 ]
  %8 = call i1 @rt_table_chunk_iterator_valid(i8* %7)
  br i1 %8, label %9, label %73

9:                                                ; preds = %6
  %10 = call i8* @rt_table_chunk_iterator_curr(i8* %7)
  %11 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack2, i64 1)
  %12 = bitcast i8* %11 to i32*
  %13 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack2, i64 2)
  %14 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack4, i64 1)
  %15 = bitcast i8* %14 to i32*
  %16 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack6, i64 1)
  %17 = bitcast i8* %16 to i32*
  %18 = call i64 @rt_table_chunk_num_rows(i8* %10)
  br label %19

19:                                               ; preds = %46, %9
  %20 = phi i64 [ 0, %9 ], [ %25, %46 ]
  %21 = icmp slt i64 %20, %18
  br i1 %21, label %22, label %71

22:                                               ; preds = %19
  %23 = getelementptr i32, i32* %12, i64 %20
  %24 = load i32, i32* %23, align 4
  %25 = add i64 %20, 1
  %26 = getelementptr i32, i32* %12, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = sub i32 %27, %24
  %29 = sext i32 %24 to i64
  %30 = getelementptr i8, i8* %13, i64 %29
  %31 = or i32 %28, -2147483648
  %32 = zext i32 %31 to i64
  %33 = ptrtoint i8* %30 to i64
  %34 = insertvalue { i64, i64 } undef, i64 %32, 0
  %35 = insertvalue { i64, i64 } %34, i64 %33, 1
  %36 = getelementptr i32, i32* %15, i64 %20
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr i32, i32* %17, i64 %20
  %39 = load i32, i32* %38, align 4
  %.unpack12.elt = getelementptr inbounds { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %2, i64 0, i32 2, i32 0
  %.unpack12.unpack = load { i8*, { { i32 }, {} } }**, { i8*, { { i32 }, {} } }*** %.unpack12.elt, align 8
  %.elt13 = getelementptr inbounds { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %2, i64 0, i32 3
  %.unpack14 = load i64, i64* %.elt13, align 8
  %40 = sext i32 %39 to i64
  %41 = mul i64 %40, -7046029254386353067
  %42 = call i64 @llvm.bswap.i64(i64 %41)
  %43 = xor i64 %42, %41
  %44 = and i64 %43, %.unpack14
  %45 = getelementptr { i8*, { { i32 }, {} } }*, { i8*, { { i32 }, {} } }** %.unpack12.unpack, i64 %44
  br label %46

46:                                               ; preds = %69, %22
  %.in = phi { i8*, { { i32 }, {} } }** [ %70, %69 ], [ %45, %22 ]
  %47 = load { i8*, { { i32 }, {} } }*, { i8*, { { i32 }, {} } }** %.in, align 8
  %.not = icmp eq { i8*, { { i32 }, {} } }* %47, null
  br i1 %.not, label %19, label %48

48:                                               ; preds = %46
  %49 = getelementptr { i8*, { { i32 }, {} } }, { i8*, { { i32 }, {} } }* %47, i64 0, i32 1, i32 0, i32 0
  %.unpack22.unpack = load i32, i32* %49, align 4
  %50 = icmp eq i32 %39, %.unpack22.unpack
  br i1 %50, label %51, label %69

51:                                               ; preds = %48
  %52 = insertvalue { i32 } undef, i32 %37, 0
  %53 = insertvalue { { i64, i64 } } undef, { i64, i64 } %35, 0
  %54 = insertvalue { { i32 }, { { i64, i64 } } } undef, { i32 } %52, 0
  %55 = insertvalue { { i32 }, { { i64, i64 } } } %54, { { i64, i64 } } %53, 1
  %56 = sext i32 %37 to i64
  %57 = mul i64 %56, -7046029254386353067
  %58 = call i64 @llvm.bswap.i64(i64 %57)
  %59 = xor i64 %58, %57
  %60 = getelementptr { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }, { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %0, i64 0, i32 0
  %61 = getelementptr { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }, { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %0, i64 0, i32 1
  %62 = load i64, i64* %60, align 4
  %63 = load i64, i64* %61, align 4
  %64 = icmp ult i64 %62, %63
  br i1 %64, label %67, label %65

65:                                               ; preds = %51
  %66 = bitcast { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %0 to i8*
  call void @rt_resize_vec(i8* %66)
  br label %67

67:                                               ; preds = %51, %65
  %.elt26 = getelementptr { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }, { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %0, i64 0, i32 2, i32 0
  %.unpack27 = load { i64, { { i32 }, { { i64, i64 } } } }*, { i64, { { i32 }, { { i64, i64 } } } }** %.elt26, align 8
  %.repack = getelementptr { i64, { { i32 }, { { i64, i64 } } } }, { i64, { { i32 }, { { i64, i64 } } } }* %.unpack27, i64 %62, i32 0
  store i64 %59, i64* %.repack, align 4
  %.repack31 = getelementptr { i64, { { i32 }, { { i64, i64 } } } }, { i64, { { i32 }, { { i64, i64 } } } }* %.unpack27, i64 %62, i32 1
  store { { i32 }, { { i64, i64 } } } %55, { { i32 }, { { i64, i64 } } }* %.repack31, align 4
  %68 = add i64 %62, 1
  store i64 %68, i64* %60, align 4
  br label %69

69:                                               ; preds = %67, %48
  %70 = bitcast { i8*, { { i32 }, {} } }* %47 to { i8*, { { i32 }, {} } }**
  br label %46

71:                                               ; preds = %19
  %72 = call i8* @rt_table_chunk_iterator_next(i8* %7)
  br label %6

73:                                               ; preds = %6
  call void @rt_table_chunk_iterator_free(i8* %7)
  ret { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %0
}

; Function Attrs: noinline optnone
define { i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }* @pipeline_fn_10_init_0() #0 {
  %1 = call i8* @rt_create_vec(i64 104, i64 1024)
  %2 = bitcast i8* %1 to { i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }*
  ret { i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }* %2
}

define { i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }* @pipeline_fn_10_main_0({ i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }* %0, { i8*, i64, i64, i64, i64, i64, i64, i64 }* %1, { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* %2, { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* %3) {
  %.elt = getelementptr inbounds { i8*, i64, i64, i64, i64, i64, i64, i64 }, { i8*, i64, i64, i64, i64, i64, i64, i64 }* %1, i64 0, i32 0
  %.unpack = load i8*, i8** %.elt, align 8
  %.elt1 = getelementptr inbounds { i8*, i64, i64, i64, i64, i64, i64, i64 }, { i8*, i64, i64, i64, i64, i64, i64, i64 }* %1, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.elt3 = getelementptr inbounds { i8*, i64, i64, i64, i64, i64, i64, i64 }, { i8*, i64, i64, i64, i64, i64, i64, i64 }* %1, i64 0, i32 2
  %.unpack4 = load i64, i64* %.elt3, align 8
  %.elt5 = getelementptr inbounds { i8*, i64, i64, i64, i64, i64, i64, i64 }, { i8*, i64, i64, i64, i64, i64, i64, i64 }* %1, i64 0, i32 3
  %.unpack6 = load i64, i64* %.elt5, align 8
  %.elt7 = getelementptr inbounds { i8*, i64, i64, i64, i64, i64, i64, i64 }, { i8*, i64, i64, i64, i64, i64, i64, i64 }* %1, i64 0, i32 4
  %.unpack8 = load i64, i64* %.elt7, align 8
  %.elt9 = getelementptr inbounds { i8*, i64, i64, i64, i64, i64, i64, i64 }, { i8*, i64, i64, i64, i64, i64, i64, i64 }* %1, i64 0, i32 5
  %.unpack10 = load i64, i64* %.elt9, align 8
  %.elt11 = getelementptr inbounds { i8*, i64, i64, i64, i64, i64, i64, i64 }, { i8*, i64, i64, i64, i64, i64, i64, i64 }* %1, i64 0, i32 6
  %.unpack12 = load i64, i64* %.elt11, align 8
  %.elt13 = getelementptr inbounds { i8*, i64, i64, i64, i64, i64, i64, i64 }, { i8*, i64, i64, i64, i64, i64, i64, i64 }* %1, i64 0, i32 7
  %.unpack14 = load i64, i64* %.elt13, align 8
  %5 = call i8* @rt_table_chunk_iterator_init(i8* %.unpack)
  br label %6

6:                                                ; preds = %131, %4
  %7 = phi i8* [ %132, %131 ], [ %5, %4 ]
  %8 = call i1 @rt_table_chunk_iterator_valid(i8* %7)
  br i1 %8, label %9, label %133

9:                                                ; preds = %6
  %10 = call i8* @rt_table_chunk_iterator_curr(i8* %7)
  %11 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack2, i64 1)
  %12 = bitcast i8* %11 to i128*
  %13 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack4, i64 1)
  %14 = bitcast i8* %13 to i32*
  %15 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack4, i64 2)
  %16 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack6, i64 1)
  %17 = bitcast i8* %16 to i32*
  %18 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack6, i64 2)
  %19 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack8, i64 1)
  %20 = bitcast i8* %19 to i32*
  %21 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack8, i64 2)
  %22 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack10, i64 1)
  %23 = bitcast i8* %22 to i32*
  %24 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack12, i64 1)
  %25 = bitcast i8* %24 to i32*
  %26 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack12, i64 2)
  %27 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack14, i64 1)
  %28 = bitcast i8* %27 to i32*
  %29 = call i64 @rt_table_chunk_num_rows(i8* %10)
  br label %30

30:                                               ; preds = %96, %9
  %31 = phi i64 [ 0, %9 ], [ %39, %96 ]
  %32 = icmp slt i64 %31, %29
  br i1 %32, label %33, label %131

33:                                               ; preds = %30
  %34 = getelementptr i128, i128* %12, i64 %31
  %35 = load i128, i128* %34, align 4
  %36 = trunc i128 %35 to i64
  %37 = getelementptr i32, i32* %14, i64 %31
  %38 = load i32, i32* %37, align 4
  %39 = add i64 %31, 1
  %40 = getelementptr i32, i32* %14, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = sub i32 %41, %38
  %43 = sext i32 %38 to i64
  %44 = getelementptr i8, i8* %15, i64 %43
  %45 = or i32 %42, -2147483648
  %46 = zext i32 %45 to i64
  %47 = ptrtoint i8* %44 to i64
  %48 = insertvalue { i64, i64 } undef, i64 %46, 0
  %49 = insertvalue { i64, i64 } %48, i64 %47, 1
  %50 = getelementptr i32, i32* %17, i64 %31
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr i32, i32* %17, i64 %39
  %53 = load i32, i32* %52, align 4
  %54 = sub i32 %53, %51
  %55 = sext i32 %51 to i64
  %56 = getelementptr i8, i8* %18, i64 %55
  %57 = or i32 %54, -2147483648
  %58 = zext i32 %57 to i64
  %59 = ptrtoint i8* %56 to i64
  %60 = insertvalue { i64, i64 } undef, i64 %58, 0
  %61 = insertvalue { i64, i64 } %60, i64 %59, 1
  %62 = getelementptr i32, i32* %20, i64 %31
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr i32, i32* %20, i64 %39
  %65 = load i32, i32* %64, align 4
  %66 = sub i32 %65, %63
  %67 = sext i32 %63 to i64
  %68 = getelementptr i8, i8* %21, i64 %67
  %69 = or i32 %66, -2147483648
  %70 = zext i32 %69 to i64
  %71 = ptrtoint i8* %68 to i64
  %72 = insertvalue { i64, i64 } undef, i64 %70, 0
  %73 = insertvalue { i64, i64 } %72, i64 %71, 1
  %74 = getelementptr i32, i32* %23, i64 %31
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr i32, i32* %25, i64 %31
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr i32, i32* %25, i64 %39
  %79 = load i32, i32* %78, align 4
  %80 = sub i32 %79, %77
  %81 = sext i32 %77 to i64
  %82 = getelementptr i8, i8* %26, i64 %81
  %83 = or i32 %80, -2147483648
  %84 = zext i32 %83 to i64
  %85 = ptrtoint i8* %82 to i64
  %86 = insertvalue { i64, i64 } undef, i64 %84, 0
  %87 = insertvalue { i64, i64 } %86, i64 %85, 1
  %88 = getelementptr i32, i32* %28, i64 %31
  %89 = load i32, i32* %88, align 4
  %.unpack20.elt = getelementptr inbounds { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }, { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* %2, i64 0, i32 2, i32 0
  %.unpack20.unpack = load { i8*, { { i32 }, { { i64, i64 } } } }**, { i8*, { { i32 }, { { i64, i64 } } } }*** %.unpack20.elt, align 8
  %.elt21 = getelementptr inbounds { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }, { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* %2, i64 0, i32 3
  %.unpack22 = load i64, i64* %.elt21, align 8
  %90 = sext i32 %75 to i64
  %91 = mul i64 %90, -7046029254386353067
  %92 = call i64 @llvm.bswap.i64(i64 %91)
  %93 = xor i64 %92, %91
  %94 = and i64 %.unpack22, %93
  %95 = getelementptr { i8*, { { i32 }, { { i64, i64 } } } }*, { i8*, { { i32 }, { { i64, i64 } } } }** %.unpack20.unpack, i64 %94
  br label %96

96:                                               ; preds = %129, %33
  %.in = phi { i8*, { { i32 }, { { i64, i64 } } } }** [ %130, %129 ], [ %95, %33 ]
  %97 = load { i8*, { { i32 }, { { i64, i64 } } } }*, { i8*, { { i32 }, { { i64, i64 } } } }** %.in, align 8
  %.not = icmp eq { i8*, { { i32 }, { { i64, i64 } } } }* %97, null
  br i1 %.not, label %30, label %98

98:                                               ; preds = %96
  %99 = getelementptr { i8*, { { i32 }, { { i64, i64 } } } }, { i8*, { { i32 }, { { i64, i64 } } } }* %97, i64 0, i32 1
  %100 = load { { i32 }, { { i64, i64 } } }, { { i32 }, { { i64, i64 } } }* %99, align 4
  %101 = extractvalue { { i32 }, { { i64, i64 } } } %100, 0
  %102 = extractvalue { i32 } %101, 0
  %103 = icmp eq i32 %75, %102
  br i1 %103, label %104, label %129

104:                                              ; preds = %98
  %105 = extractvalue { { i32 }, { { i64, i64 } } } %100, 1
  %106 = extractvalue { { i64, i64 } } %105, 0
  %107 = insertvalue { i32 } undef, i32 %89, 0
  %108 = insertvalue { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } undef, { i64, i64 } %61, 0
  %109 = insertvalue { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } %108, { i64, i64 } %49, 1
  %110 = insertvalue { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } %109, { i64, i64 } %73, 2
  %111 = insertvalue { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } %110, i64 %36, 3
  %112 = insertvalue { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } %111, { i64, i64 } %87, 4
  %113 = insertvalue { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } %112, { i64, i64 } %106, 5
  %114 = insertvalue { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } undef, { i32 } %107, 0
  %115 = insertvalue { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } %114, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } %113, 1
  %116 = sext i32 %89 to i64
  %117 = mul i64 %116, -7046029254386353067
  %118 = call i64 @llvm.bswap.i64(i64 %117)
  %119 = xor i64 %118, %117
  %120 = getelementptr { i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }, { i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }* %0, i64 0, i32 0
  %121 = getelementptr { i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }, { i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }* %0, i64 0, i32 1
  %122 = load i64, i64* %120, align 4
  %123 = load i64, i64* %121, align 4
  %124 = icmp ult i64 %122, %123
  br i1 %124, label %127, label %125

125:                                              ; preds = %104
  %126 = bitcast { i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }* %0 to i8*
  call void @rt_resize_vec(i8* %126)
  br label %127

127:                                              ; preds = %104, %125
  %.elt29 = getelementptr { i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }, { i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }* %0, i64 0, i32 2, i32 0
  %.unpack30 = load { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }** %.elt29, align 8
  %.repack = getelementptr { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }, { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }* %.unpack30, i64 %122, i32 0
  store i64 %119, i64* %.repack, align 4
  %.repack34 = getelementptr { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }, { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }* %.unpack30, i64 %122, i32 1
  store { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } %115, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } }* %.repack34, align 4
  %128 = add i64 %122, 1
  store i64 %128, i64* %120, align 4
  br label %129

129:                                              ; preds = %127, %98
  %130 = bitcast { i8*, { { i32 }, { { i64, i64 } } } }* %97 to { i8*, { { i32 }, { { i64, i64 } } } }**
  br label %96

131:                                              ; preds = %30
  %132 = call i8* @rt_table_chunk_iterator_next(i8* %7)
  br label %6

133:                                              ; preds = %6
  call void @rt_table_chunk_iterator_free(i8* %7)
  ret { i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }* %0
}

; Function Attrs: noinline optnone
define { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* @pipeline_fn_9_init_0() #0 {
  %1 = call i8* @rt_create_vec(i64 120, i64 1024)
  %2 = bitcast i8* %1 to { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }*
  ret { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %2
}

define { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* @pipeline_fn_9_main_0({ i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %0, { i8*, i64, i64, i64 }* %1, { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* %2, { { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }**, i64 }, i64 }* %3, { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* %4, { { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }**, i64 }, i64 }* %5) {
  %.elt = getelementptr inbounds { i8*, i64, i64, i64 }, { i8*, i64, i64, i64 }* %1, i64 0, i32 0
  %.unpack = load i8*, i8** %.elt, align 8
  %.elt1 = getelementptr inbounds { i8*, i64, i64, i64 }, { i8*, i64, i64, i64 }* %1, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.elt3 = getelementptr inbounds { i8*, i64, i64, i64 }, { i8*, i64, i64, i64 }* %1, i64 0, i32 2
  %.unpack4 = load i64, i64* %.elt3, align 8
  %.elt5 = getelementptr inbounds { i8*, i64, i64, i64 }, { i8*, i64, i64, i64 }* %1, i64 0, i32 3
  %.unpack6 = load i64, i64* %.elt5, align 8
  %7 = call i8* @rt_table_chunk_iterator_init(i8* %.unpack)
  br label %8

8:                                                ; preds = %95, %6
  %9 = phi i8* [ %96, %95 ], [ %7, %6 ]
  %10 = call i1 @rt_table_chunk_iterator_valid(i8* %9)
  br i1 %10, label %11, label %97

11:                                               ; preds = %8
  %12 = call i8* @rt_table_chunk_iterator_curr(i8* %9)
  %13 = call i8* @rt_table_chunk_get_column_buffer(i8* %12, i64 %.unpack2, i64 1)
  %14 = bitcast i8* %13 to i32*
  %15 = call i8* @rt_table_chunk_get_column_buffer(i8* %12, i64 %.unpack4, i64 1)
  %16 = bitcast i8* %15 to i32*
  %17 = call i8* @rt_table_chunk_get_column_buffer(i8* %12, i64 %.unpack6, i64 1)
  %18 = bitcast i8* %17 to i128*
  %19 = call i64 @rt_table_chunk_num_rows(i8* %12)
  br label %20

20:                                               ; preds = %93, %11
  %21 = phi i64 [ %94, %93 ], [ 0, %11 ]
  %22 = icmp slt i64 %21, %19
  br i1 %22, label %23, label %95

23:                                               ; preds = %20
  %24 = getelementptr i32, i32* %14, i64 %21
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr i32, i32* %16, i64 %21
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr i128, i128* %18, i64 %21
  %29 = load i128, i128* %28, align 4
  %30 = trunc i128 %29 to i64
  %.unpack12.elt = getelementptr inbounds { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }, { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* %2, i64 0, i32 2, i32 0
  %.unpack12.unpack = load { i8*, { { i32 }, { { i64, i64 } } } }**, { i8*, { { i32 }, { { i64, i64 } } } }*** %.unpack12.elt, align 8
  %.elt13 = getelementptr inbounds { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }, { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* %2, i64 0, i32 3
  %.unpack14 = load i64, i64* %.elt13, align 8
  %31 = sext i32 %25 to i64
  %32 = mul i64 %31, -7046029254386353067
  %33 = call i64 @llvm.bswap.i64(i64 %32)
  %34 = xor i64 %33, %32
  %35 = and i64 %.unpack14, %34
  %36 = getelementptr { i8*, { { i32 }, { { i64, i64 } } } }*, { i8*, { { i32 }, { { i64, i64 } } } }** %.unpack12.unpack, i64 %35
  br label %37

37:                                               ; preds = %91, %23
  %.in = phi { i8*, { { i32 }, { { i64, i64 } } } }** [ %92, %91 ], [ %36, %23 ]
  %38 = load { i8*, { { i32 }, { { i64, i64 } } } }*, { i8*, { { i32 }, { { i64, i64 } } } }** %.in, align 8
  %.not = icmp eq { i8*, { { i32 }, { { i64, i64 } } } }* %38, null
  br i1 %.not, label %93, label %39

39:                                               ; preds = %37
  %40 = getelementptr { i8*, { { i32 }, { { i64, i64 } } } }, { i8*, { { i32 }, { { i64, i64 } } } }* %38, i64 0, i32 1
  %41 = load { { i32 }, { { i64, i64 } } }, { { i32 }, { { i64, i64 } } }* %40, align 4
  %42 = extractvalue { { i32 }, { { i64, i64 } } } %41, 0
  %43 = extractvalue { { i32 }, { { i64, i64 } } } %41, 1
  %44 = extractvalue { i32 } %42, 0
  %45 = extractvalue { { i64, i64 } } %43, 0
  %46 = icmp eq i32 %44, %25
  br i1 %46, label %47, label %91

47:                                               ; preds = %39
  %.unpack26.elt = getelementptr inbounds { { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }**, i64 }, i64 }, { { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }**, i64 }, i64 }* %3, i64 0, i32 2, i32 0
  %.unpack26.unpack = load { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }**, { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*** %.unpack26.elt, align 8
  %.elt27 = getelementptr inbounds { { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }**, i64 }, i64 }, { { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }**, i64 }, i64 }* %3, i64 0, i32 3
  %.unpack28 = load i64, i64* %.elt27, align 8
  %48 = sext i32 %27 to i64
  %49 = mul i64 %48, -7046029254386353067
  %50 = call i64 @llvm.bswap.i64(i64 %49)
  %51 = xor i64 %50, %49
  %52 = and i64 %.unpack28, %51
  %53 = getelementptr { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }** %.unpack26.unpack, i64 %52
  br label %54

54:                                               ; preds = %89, %47
  %.in36 = phi { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }** [ %90, %89 ], [ %53, %47 ]
  %55 = load { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }** %.in36, align 8
  %.not35 = icmp eq { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }* %55, null
  br i1 %.not35, label %91, label %56

56:                                               ; preds = %54
  %57 = getelementptr { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }, { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }* %55, i64 0, i32 1
  %58 = load { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } }, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } }* %57, align 4
  %59 = extractvalue { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } %58, 0
  %60 = extractvalue { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } %58, 1
  %61 = extractvalue { i32 } %59, 0
  %62 = icmp eq i32 %61, %27
  br i1 %62, label %63, label %89

63:                                               ; preds = %56
  %64 = extractvalue { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } %60, 5
  %65 = extractvalue { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } %60, 4
  %66 = extractvalue { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } %60, 3
  %67 = extractvalue { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } %60, 2
  %68 = extractvalue { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } %60, 1
  %69 = extractvalue { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } %60, 0
  %70 = insertvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } undef, { i64, i64 } %69, 0
  %71 = insertvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %70, { i64, i64 } %68, 1
  %72 = insertvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %71, i64 %30, 2
  %73 = insertvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %72, { i64, i64 } %67, 3
  %74 = insertvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %73, { i64, i64 } %45, 4
  %75 = insertvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %74, i32 %25, 5
  %76 = insertvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %75, i64 %66, 6
  %77 = insertvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %76, { i64, i64 } %65, 7
  %78 = insertvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %77, { i64, i64 } %64, 8
  %79 = getelementptr { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }, { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %0, i64 0, i32 0
  %80 = getelementptr { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }, { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %0, i64 0, i32 1
  %81 = load i64, i64* %79, align 4
  %82 = load i64, i64* %80, align 4
  %83 = icmp ult i64 %81, %82
  br i1 %83, label %86, label %84

84:                                               ; preds = %63
  %85 = bitcast { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %0 to i8*
  call void @rt_resize_vec(i8* %85)
  br label %86

86:                                               ; preds = %63, %84
  %.elt37 = getelementptr { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }, { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %0, i64 0, i32 2, i32 0
  %.unpack38 = load { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }** %.elt37, align 8
  %87 = getelementptr { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }, { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }* %.unpack38, i64 %81
  store { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %78, { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }* %87, align 4
  %88 = add i64 %81, 1
  store i64 %88, i64* %79, align 4
  br label %89

89:                                               ; preds = %86, %56
  %90 = bitcast { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }* %55 to { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }**
  br label %54

91:                                               ; preds = %54, %39
  %92 = bitcast { i8*, { { i32 }, { { i64, i64 } } } }* %38 to { i8*, { { i32 }, { { i64, i64 } } } }**
  br label %37

93:                                               ; preds = %37
  %94 = add i64 %21, 1
  br label %20

95:                                               ; preds = %20
  %96 = call i8* @rt_table_chunk_iterator_next(i8* %9)
  br label %8

97:                                               ; preds = %8
  call void @rt_table_chunk_iterator_free(i8* %9)
  ret { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %0
}

; Function Attrs: noinline optnone
define { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* @pipeline_fn_8_init_0() #0 {
  %1 = call i8* @rt_create_aggr_ht(i64 24, i64 4)
  %2 = bitcast i8* %1 to { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }*
  %3 = getelementptr { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }, { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %2, i64 0, i32 4
  store {} undef, {}* %3, align 1
  ret { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %2
}

define { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* @pipeline_fn_8_main_0({ i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %0, { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %1) {
  %.elt = getelementptr inbounds { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }, { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %1, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.unpack4.elt = getelementptr inbounds { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }, { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %1, i64 0, i32 2, i32 0
  %.unpack4.unpack = load { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }** %.unpack4.elt, align 8
  br label %3

3:                                                ; preds = %51, %2
  %4 = phi i64 [ %52, %51 ], [ 0, %2 ]
  %5 = icmp slt i64 %4, %.unpack
  br i1 %5, label %6, label %53

6:                                                ; preds = %3
  %7 = getelementptr { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }, { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }* %.unpack4.unpack, i64 %4, i32 5
  %8 = load i32, i32* %7, align 4
  %9 = insertvalue { i32 } undef, i32 %8, 0
  %10 = sext i32 %8 to i64
  %11 = mul i64 %10, -7046029254386353067
  %12 = call i64 @llvm.bswap.i64(i64 %11)
  %13 = xor i64 %12, %11
  %14 = getelementptr { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }, { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %0, i64 0, i32 0
  %15 = getelementptr { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }, { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %0, i64 0, i32 1
  %16 = load i64, i64* %14, align 4
  %17 = load i64, i64* %15, align 4
  %18 = icmp ult i64 %16, %17
  br i1 %18, label %21, label %19

19:                                               ; preds = %6
  %20 = bitcast { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %0 to i8*
  call void @rt_resize_aggr_ht(i8* %20, i64 24)
  %.pre = load i64, i64* %15, align 4
  br label %21

21:                                               ; preds = %6, %19
  %22 = phi i64 [ %.pre, %19 ], [ %17, %6 ]
  %.elt8 = getelementptr { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }, { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %0, i64 0, i32 3, i32 0
  %.unpack9 = load { i8*, i64, { { i32 }, {} } }**, { i8*, i64, { { i32 }, {} } }*** %.elt8, align 8
  %23 = mul i64 %22, 2
  %24 = add i64 %23, -1
  %25 = and i64 %24, %13
  %26 = getelementptr { i8*, i64, { { i32 }, {} } }*, { i8*, i64, { { i32 }, {} } }** %.unpack9, i64 %25
  br label %27

27:                                               ; preds = %48, %21
  %28 = phi { i8*, i64, { { i32 }, {} } }** [ %50, %48 ], [ %26, %21 ]
  %29 = load { i8*, i64, { { i32 }, {} } }*, { i8*, i64, { { i32 }, {} } }** %28, align 8
  %.not = icmp eq { i8*, i64, { { i32 }, {} } }* %29, null
  br i1 %.not, label %42, label %30

30:                                               ; preds = %27
  %31 = getelementptr { i8*, i64, { { i32 }, {} } }, { i8*, i64, { { i32 }, {} } }* %29, i64 0, i32 1
  %32 = load i64, i64* %31, align 4
  %33 = icmp eq i64 %32, %13
  br i1 %33, label %34, label %40

34:                                               ; preds = %30
  %35 = getelementptr { i8*, i64, { { i32 }, {} } }, { i8*, i64, { { i32 }, {} } }* %29, i64 0, i32 2, i32 0, i32 0
  %.unpack16 = load i32, i32* %35, align 4
  %36 = icmp eq i32 %.unpack16, %8
  %37 = icmp ne i32 %.unpack16, %8
  %38 = bitcast { i8*, i64, { { i32 }, {} } }* %29 to { i8*, i64, { { i32 }, {} } }**
  %39 = select i1 %36, { i8*, i64, { { i32 }, {} } }** %28, { i8*, i64, { { i32 }, {} } }** %38
  br label %48

40:                                               ; preds = %30
  %41 = bitcast { i8*, i64, { { i32 }, {} } }* %29 to { i8*, i64, { { i32 }, {} } }**
  br label %48

42:                                               ; preds = %27
  %43 = insertvalue { { i32 }, {} } undef, { i32 } %9, 0
  %44 = insertvalue { i8*, i64, { { i32 }, {} } } { i8* null, i64 undef, { { i32 }, {} } undef }, i64 %13, 1
  %45 = insertvalue { i8*, i64, { { i32 }, {} } } %44, { { i32 }, {} } %43, 2
  %.elt12 = getelementptr { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }, { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %0, i64 0, i32 2, i32 0
  %.unpack13 = load { i8*, i64, { { i32 }, {} } }*, { i8*, i64, { { i32 }, {} } }** %.elt12, align 8
  %46 = getelementptr { i8*, i64, { { i32 }, {} } }, { i8*, i64, { { i32 }, {} } }* %.unpack13, i64 %16
  store { i8*, i64, { { i32 }, {} } } %45, { i8*, i64, { { i32 }, {} } }* %46, align 8
  store { i8*, i64, { { i32 }, {} } }* %46, { i8*, i64, { { i32 }, {} } }** %28, align 8
  %47 = add i64 %16, 1
  store i64 %47, i64* %14, align 4
  br label %48

48:                                               ; preds = %40, %34, %42
  %49 = phi i1 [ false, %42 ], [ %37, %34 ], [ true, %40 ]
  %50 = phi { i8*, i64, { { i32 }, {} } }** [ %28, %42 ], [ %39, %34 ], [ %41, %40 ]
  br i1 %49, label %27, label %51

51:                                               ; preds = %48
  %52 = add i64 %4, 1
  br label %3

53:                                               ; preds = %3
  ret { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %0
}

; Function Attrs: noinline optnone
define { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_7_init_0() #0 {
  %1 = call i8* @rt_create_vec(i64 16, i64 1024)
  %2 = bitcast i8* %1 to { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }*
  ret { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %2
}

define { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_7_main_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %1, { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %2) {
  %.elt = getelementptr inbounds { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }, { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %1, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.unpack4.elt = getelementptr inbounds { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }, { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %1, i64 0, i32 2, i32 0
  %.unpack4.unpack = load { i8*, i64, { { i32 }, {} } }*, { i8*, i64, { { i32 }, {} } }** %.unpack4.elt, align 8
  br label %4

4:                                                ; preds = %24, %3
  %5 = phi i64 [ %27, %24 ], [ 0, %3 ]
  %6 = icmp slt i64 %5, %.unpack
  br i1 %6, label %7, label %28

7:                                                ; preds = %4
  %8 = getelementptr { i8*, i64, { { i32 }, {} } }, { i8*, i64, { { i32 }, {} } }* %.unpack4.unpack, i64 %5, i32 2, i32 0, i32 0
  %.unpack16.unpack = load i32, i32* %8, align 4
  %9 = insertvalue { i32 } undef, i32 %.unpack16.unpack, 0
  %10 = insertvalue { { i32 }, {} } undef, { i32 } %9, 0
  %11 = sext i32 %.unpack16.unpack to i64
  %12 = mul i64 %11, -7046029254386353067
  %13 = call i64 @llvm.bswap.i64(i64 %12)
  %14 = xor i64 %13, %12
  %15 = insertvalue { i64, { { i32 }, {} } } undef, i64 %14, 0
  %16 = insertvalue { i64, { { i32 }, {} } } %15, { { i32 }, {} } %10, 1
  %17 = getelementptr { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }, { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, i64 0, i32 0
  %18 = getelementptr { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }, { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, i64 0, i32 1
  %19 = load i64, i64* %17, align 4
  %20 = load i64, i64* %18, align 4
  %21 = icmp ult i64 %19, %20
  br i1 %21, label %24, label %22

22:                                               ; preds = %7
  %23 = bitcast { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0 to i8*
  call void @rt_resize_vec(i8* %23)
  br label %24

24:                                               ; preds = %7, %22
  %.elt20 = getelementptr { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }, { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, i64 0, i32 2, i32 0
  %.unpack21 = load { i64, { { i32 }, {} } }*, { i64, { { i32 }, {} } }** %.elt20, align 8
  %25 = getelementptr { i64, { { i32 }, {} } }, { i64, { { i32 }, {} } }* %.unpack21, i64 %19
  store { i64, { { i32 }, {} } } %16, { i64, { { i32 }, {} } }* %25, align 4
  %26 = add i64 %19, 1
  store i64 %26, i64* %17, align 4
  %27 = add i64 %5, 1
  br label %4

28:                                               ; preds = %4
  ret { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0
}

; Function Attrs: noinline optnone
define { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* @pipeline_fn_4_finalize_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0) #0 {
  %2 = bitcast { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0 to i8*
  %3 = call i8* @rt_build_join_ht(i8* %2, i64 16)
  %4 = bitcast i8* %3 to { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }*
  ret { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %4
}

; Function Attrs: noinline optnone
define { i8*, i64, i64 }* @pipeline_fn_4_init_1() #0 {
  %1 = call i8* @rt_get_execution_context()
  %2 = call i8* @rt_scan_source_init(i8* %1, { i64, i64 } { i64 8368286770260869184, i64 ptrtoint ([64 x i8]* @global_str_const_6 to i64) })
  %3 = bitcast i8* %2 to { i8*, i64, i64 }*
  ret { i8*, i64, i64 }* %3
}

; Function Attrs: noinline optnone
define { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* @pipeline_fn_5_finalize_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0) #0 {
  %2 = bitcast { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0 to i8*
  %3 = call i8* @rt_build_join_ht(i8* %2, i64 16)
  %4 = bitcast i8* %3 to { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }*
  ret { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %4
}

; Function Attrs: noinline optnone
define { i8*, i64, i64 }* @pipeline_fn_5_init_1() #0 {
  %1 = call i8* @rt_get_execution_context()
  %2 = call i8* @rt_scan_source_init(i8* %1, { i64, i64 } { i64 8368286770260869184, i64 ptrtoint ([64 x i8]* @global_str_const_7 to i64) })
  %3 = bitcast i8* %2 to { i8*, i64, i64 }*
  ret { i8*, i64, i64 }* %3
}

; Function Attrs: noinline optnone
define { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* @pipeline_fn_6_finalize_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0) #0 {
  %2 = bitcast { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0 to i8*
  %3 = call i8* @rt_build_join_ht(i8* %2, i64 16)
  %4 = bitcast i8* %3 to { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }*
  ret { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %4
}

; Function Attrs: noinline optnone
define { i8*, i64, i64 }* @pipeline_fn_6_init_1() #0 {
  %1 = call i8* @rt_get_execution_context()
  %2 = call i8* @rt_scan_source_init(i8* %1, { i64, i64 } { i64 8368286770260869179, i64 ptrtoint ([59 x i8]* @global_str_const_8 to i64) })
  %3 = bitcast i8* %2 to { i8*, i64, i64 }*
  ret { i8*, i64, i64 }* %3
}

; Function Attrs: noinline optnone
define { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_6_init_0() #0 {
  %1 = call i8* @rt_create_vec(i64 16, i64 1024)
  %2 = bitcast i8* %1 to { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }*
  ret { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %2
}

define { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_6_main_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, { i8*, i64, i64 }* %1) {
  %.elt = getelementptr inbounds { i8*, i64, i64 }, { i8*, i64, i64 }* %1, i64 0, i32 0
  %.unpack = load i8*, i8** %.elt, align 8
  %.elt1 = getelementptr inbounds { i8*, i64, i64 }, { i8*, i64, i64 }* %1, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.elt3 = getelementptr inbounds { i8*, i64, i64 }, { i8*, i64, i64 }* %1, i64 0, i32 2
  %.unpack4 = load i64, i64* %.elt3, align 8
  %3 = call i8* @rt_table_chunk_iterator_init(i8* %.unpack)
  br label %4

4:                                                ; preds = %55, %2
  %5 = phi i8* [ %56, %55 ], [ %3, %2 ]
  %6 = call i1 @rt_table_chunk_iterator_valid(i8* %5)
  br i1 %6, label %7, label %57

7:                                                ; preds = %4
  %8 = call i8* @rt_table_chunk_iterator_curr(i8* %5)
  %9 = call i8* @rt_table_chunk_get_column_buffer(i8* %8, i64 %.unpack2, i64 1)
  %10 = bitcast i8* %9 to i32*
  %11 = call i8* @rt_table_chunk_get_column_buffer(i8* %8, i64 %.unpack2, i64 2)
  %12 = call i8* @rt_table_chunk_get_column_buffer(i8* %8, i64 %.unpack4, i64 1)
  %13 = bitcast i8* %12 to i32*
  %14 = call i64 @rt_table_chunk_num_rows(i8* %8)
  br label %15

15:                                               ; preds = %54, %7
  %16 = phi i64 [ %21, %54 ], [ 0, %7 ]
  %17 = icmp slt i64 %16, %14
  br i1 %17, label %18, label %55

18:                                               ; preds = %15
  %19 = getelementptr i32, i32* %10, i64 %16
  %20 = load i32, i32* %19, align 4
  %21 = add i64 %16, 1
  %22 = getelementptr i32, i32* %10, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = sub i32 %23, %20
  %25 = sext i32 %20 to i64
  %26 = getelementptr i8, i8* %11, i64 %25
  %27 = or i32 %24, -2147483648
  %28 = zext i32 %27 to i64
  %29 = ptrtoint i8* %26 to i64
  %30 = insertvalue { i64, i64 } undef, i64 %28, 0
  %31 = insertvalue { i64, i64 } %30, i64 %29, 1
  %32 = call i1 @rt_cmp_string_eq(i1 false, { i64, i64 } %31, { i64, i64 } { i64 5715724631927685126, i64 17744 })
  br i1 %32, label %33, label %54

33:                                               ; preds = %18
  %34 = getelementptr i32, i32* %13, i64 %16
  %35 = load i32, i32* %34, align 4
  %36 = insertvalue { i32 } undef, i32 %35, 0
  %37 = insertvalue { { i32 }, {} } undef, { i32 } %36, 0
  %38 = sext i32 %35 to i64
  %39 = mul i64 %38, -7046029254386353067
  %40 = call i64 @llvm.bswap.i64(i64 %39)
  %41 = xor i64 %40, %39
  %42 = insertvalue { i64, { { i32 }, {} } } undef, i64 %41, 0
  %43 = insertvalue { i64, { { i32 }, {} } } %42, { { i32 }, {} } %37, 1
  %44 = getelementptr { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }, { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, i64 0, i32 0
  %45 = getelementptr { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }, { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, i64 0, i32 1
  %46 = load i64, i64* %44, align 4
  %47 = load i64, i64* %45, align 4
  %48 = icmp ult i64 %46, %47
  br i1 %48, label %51, label %49

49:                                               ; preds = %33
  %50 = bitcast { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0 to i8*
  call void @rt_resize_vec(i8* %50)
  br label %51

51:                                               ; preds = %33, %49
  %.elt5 = getelementptr { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }, { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, i64 0, i32 2, i32 0
  %.unpack6 = load { i64, { { i32 }, {} } }*, { i64, { { i32 }, {} } }** %.elt5, align 8
  %52 = getelementptr { i64, { { i32 }, {} } }, { i64, { { i32 }, {} } }* %.unpack6, i64 %46
  store { i64, { { i32 }, {} } } %43, { i64, { { i32 }, {} } }* %52, align 4
  %53 = add i64 %46, 1
  store i64 %53, i64* %44, align 4
  br label %54

54:                                               ; preds = %51, %18
  br label %15

55:                                               ; preds = %15
  %56 = call i8* @rt_table_chunk_iterator_next(i8* %5)
  br label %4

57:                                               ; preds = %4
  call void @rt_table_chunk_iterator_free(i8* %5)
  ret { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0
}

; Function Attrs: noinline optnone
define { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_5_init_0() #0 {
  %1 = call i8* @rt_create_vec(i64 16, i64 1024)
  %2 = bitcast i8* %1 to { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }*
  ret { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %2
}

define { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_5_main_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, { i8*, i64, i64 }* %1, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %2, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %3) {
  %.elt = getelementptr inbounds { i8*, i64, i64 }, { i8*, i64, i64 }* %1, i64 0, i32 0
  %.unpack = load i8*, i8** %.elt, align 8
  %.elt1 = getelementptr inbounds { i8*, i64, i64 }, { i8*, i64, i64 }* %1, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.elt3 = getelementptr inbounds { i8*, i64, i64 }, { i8*, i64, i64 }* %1, i64 0, i32 2
  %.unpack4 = load i64, i64* %.elt3, align 8
  %5 = call i8* @rt_table_chunk_iterator_init(i8* %.unpack)
  br label %6

6:                                                ; preds = %58, %4
  %7 = phi i8* [ %59, %58 ], [ %5, %4 ]
  %8 = call i1 @rt_table_chunk_iterator_valid(i8* %7)
  br i1 %8, label %9, label %60

9:                                                ; preds = %6
  %10 = call i8* @rt_table_chunk_iterator_curr(i8* %7)
  %11 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack2, i64 1)
  %12 = bitcast i8* %11 to i32*
  %13 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack4, i64 1)
  %14 = bitcast i8* %13 to i32*
  %15 = call i64 @rt_table_chunk_num_rows(i8* %10)
  br label %16

16:                                               ; preds = %56, %9
  %17 = phi i64 [ %57, %56 ], [ 0, %9 ]
  %18 = icmp slt i64 %17, %15
  br i1 %18, label %19, label %58

19:                                               ; preds = %16
  %20 = getelementptr i32, i32* %12, i64 %17
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr i32, i32* %14, i64 %17
  %23 = load i32, i32* %22, align 4
  %.unpack10.elt = getelementptr inbounds { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %2, i64 0, i32 2, i32 0
  %.unpack10.unpack = load { i8*, { { i32 }, {} } }**, { i8*, { { i32 }, {} } }*** %.unpack10.elt, align 8
  %.elt11 = getelementptr inbounds { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %2, i64 0, i32 3
  %.unpack12 = load i64, i64* %.elt11, align 8
  %24 = sext i32 %23 to i64
  %25 = mul i64 %24, -7046029254386353067
  %26 = call i64 @llvm.bswap.i64(i64 %25)
  %27 = xor i64 %26, %25
  %28 = and i64 %27, %.unpack12
  %29 = getelementptr { i8*, { { i32 }, {} } }*, { i8*, { { i32 }, {} } }** %.unpack10.unpack, i64 %28
  br label %30

30:                                               ; preds = %54, %19
  %.in = phi { i8*, { { i32 }, {} } }** [ %55, %54 ], [ %29, %19 ]
  %31 = load { i8*, { { i32 }, {} } }*, { i8*, { { i32 }, {} } }** %.in, align 8
  %.not = icmp eq { i8*, { { i32 }, {} } }* %31, null
  br i1 %.not, label %56, label %32

32:                                               ; preds = %30
  %33 = getelementptr { i8*, { { i32 }, {} } }, { i8*, { { i32 }, {} } }* %31, i64 0, i32 1, i32 0, i32 0
  %.unpack20.unpack = load i32, i32* %33, align 4
  %34 = icmp eq i32 %23, %.unpack20.unpack
  br i1 %34, label %35, label %54

35:                                               ; preds = %32
  %36 = insertvalue { i32 } undef, i32 %21, 0
  %37 = insertvalue { { i32 }, {} } undef, { i32 } %36, 0
  %38 = sext i32 %21 to i64
  %39 = mul i64 %38, -7046029254386353067
  %40 = call i64 @llvm.bswap.i64(i64 %39)
  %41 = xor i64 %40, %39
  %42 = insertvalue { i64, { { i32 }, {} } } undef, i64 %41, 0
  %43 = insertvalue { i64, { { i32 }, {} } } %42, { { i32 }, {} } %37, 1
  %44 = getelementptr { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }, { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, i64 0, i32 0
  %45 = getelementptr { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }, { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, i64 0, i32 1
  %46 = load i64, i64* %44, align 4
  %47 = load i64, i64* %45, align 4
  %48 = icmp ult i64 %46, %47
  br i1 %48, label %51, label %49

49:                                               ; preds = %35
  %50 = bitcast { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0 to i8*
  call void @rt_resize_vec(i8* %50)
  br label %51

51:                                               ; preds = %35, %49
  %.elt24 = getelementptr { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }, { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, i64 0, i32 2, i32 0
  %.unpack25 = load { i64, { { i32 }, {} } }*, { i64, { { i32 }, {} } }** %.elt24, align 8
  %52 = getelementptr { i64, { { i32 }, {} } }, { i64, { { i32 }, {} } }* %.unpack25, i64 %46
  store { i64, { { i32 }, {} } } %43, { i64, { { i32 }, {} } }* %52, align 4
  %53 = add i64 %46, 1
  store i64 %53, i64* %44, align 4
  br label %54

54:                                               ; preds = %51, %32
  %55 = bitcast { i8*, { { i32 }, {} } }* %31 to { i8*, { { i32 }, {} } }**
  br label %30

56:                                               ; preds = %30
  %57 = add i64 %17, 1
  br label %16

58:                                               ; preds = %16
  %59 = call i8* @rt_table_chunk_iterator_next(i8* %7)
  br label %6

60:                                               ; preds = %6
  call void @rt_table_chunk_iterator_free(i8* %7)
  ret { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0
}

; Function Attrs: noinline optnone
define { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_4_init_0() #0 {
  %1 = call i8* @rt_create_vec(i64 16, i64 1024)
  %2 = bitcast i8* %1 to { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }*
  ret { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %2
}

define { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_4_main_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, { i8*, i64, i64 }* %1, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %2, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %3) {
  %.elt = getelementptr inbounds { i8*, i64, i64 }, { i8*, i64, i64 }* %1, i64 0, i32 0
  %.unpack = load i8*, i8** %.elt, align 8
  %.elt1 = getelementptr inbounds { i8*, i64, i64 }, { i8*, i64, i64 }* %1, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.elt3 = getelementptr inbounds { i8*, i64, i64 }, { i8*, i64, i64 }* %1, i64 0, i32 2
  %.unpack4 = load i64, i64* %.elt3, align 8
  %5 = call i8* @rt_table_chunk_iterator_init(i8* %.unpack)
  br label %6

6:                                                ; preds = %58, %4
  %7 = phi i8* [ %59, %58 ], [ %5, %4 ]
  %8 = call i1 @rt_table_chunk_iterator_valid(i8* %7)
  br i1 %8, label %9, label %60

9:                                                ; preds = %6
  %10 = call i8* @rt_table_chunk_iterator_curr(i8* %7)
  %11 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack2, i64 1)
  %12 = bitcast i8* %11 to i32*
  %13 = call i8* @rt_table_chunk_get_column_buffer(i8* %10, i64 %.unpack4, i64 1)
  %14 = bitcast i8* %13 to i32*
  %15 = call i64 @rt_table_chunk_num_rows(i8* %10)
  br label %16

16:                                               ; preds = %56, %9
  %17 = phi i64 [ %57, %56 ], [ 0, %9 ]
  %18 = icmp slt i64 %17, %15
  br i1 %18, label %19, label %58

19:                                               ; preds = %16
  %20 = getelementptr i32, i32* %12, i64 %17
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr i32, i32* %14, i64 %17
  %23 = load i32, i32* %22, align 4
  %.unpack10.elt = getelementptr inbounds { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %2, i64 0, i32 2, i32 0
  %.unpack10.unpack = load { i8*, { { i32 }, {} } }**, { i8*, { { i32 }, {} } }*** %.unpack10.elt, align 8
  %.elt11 = getelementptr inbounds { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %2, i64 0, i32 3
  %.unpack12 = load i64, i64* %.elt11, align 8
  %24 = sext i32 %21 to i64
  %25 = mul i64 %24, -7046029254386353067
  %26 = call i64 @llvm.bswap.i64(i64 %25)
  %27 = xor i64 %26, %25
  %28 = and i64 %27, %.unpack12
  %29 = getelementptr { i8*, { { i32 }, {} } }*, { i8*, { { i32 }, {} } }** %.unpack10.unpack, i64 %28
  br label %30

30:                                               ; preds = %54, %19
  %.in = phi { i8*, { { i32 }, {} } }** [ %55, %54 ], [ %29, %19 ]
  %31 = load { i8*, { { i32 }, {} } }*, { i8*, { { i32 }, {} } }** %.in, align 8
  %.not = icmp eq { i8*, { { i32 }, {} } }* %31, null
  br i1 %.not, label %56, label %32

32:                                               ; preds = %30
  %33 = getelementptr { i8*, { { i32 }, {} } }, { i8*, { { i32 }, {} } }* %31, i64 0, i32 1, i32 0, i32 0
  %.unpack20.unpack = load i32, i32* %33, align 4
  %34 = icmp eq i32 %21, %.unpack20.unpack
  br i1 %34, label %35, label %54

35:                                               ; preds = %32
  %36 = insertvalue { i32 } undef, i32 %23, 0
  %37 = insertvalue { { i32 }, {} } undef, { i32 } %36, 0
  %38 = sext i32 %23 to i64
  %39 = mul i64 %38, -7046029254386353067
  %40 = call i64 @llvm.bswap.i64(i64 %39)
  %41 = xor i64 %40, %39
  %42 = insertvalue { i64, { { i32 }, {} } } undef, i64 %41, 0
  %43 = insertvalue { i64, { { i32 }, {} } } %42, { { i32 }, {} } %37, 1
  %44 = getelementptr { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }, { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, i64 0, i32 0
  %45 = getelementptr { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }, { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, i64 0, i32 1
  %46 = load i64, i64* %44, align 4
  %47 = load i64, i64* %45, align 4
  %48 = icmp ult i64 %46, %47
  br i1 %48, label %51, label %49

49:                                               ; preds = %35
  %50 = bitcast { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0 to i8*
  call void @rt_resize_vec(i8* %50)
  br label %51

51:                                               ; preds = %35, %49
  %.elt24 = getelementptr { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }, { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0, i64 0, i32 2, i32 0
  %.unpack25 = load { i64, { { i32 }, {} } }*, { i64, { { i32 }, {} } }** %.elt24, align 8
  %52 = getelementptr { i64, { { i32 }, {} } }, { i64, { { i32 }, {} } }* %.unpack25, i64 %46
  store { i64, { { i32 }, {} } } %43, { i64, { { i32 }, {} } }* %52, align 4
  %53 = add i64 %46, 1
  store i64 %53, i64* %44, align 4
  br label %54

54:                                               ; preds = %51, %32
  %55 = bitcast { i8*, { { i32 }, {} } }* %31 to { i8*, { { i32 }, {} } }**
  br label %30

56:                                               ; preds = %30
  %57 = add i64 %17, 1
  br label %16

58:                                               ; preds = %16
  %59 = call i8* @rt_table_chunk_iterator_next(i8* %7)
  br label %6

60:                                               ; preds = %6
  call void @rt_table_chunk_iterator_free(i8* %7)
  ret { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %0
}

; Function Attrs: noinline optnone
define { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* @pipeline_fn_3_init_0() #0 {
  %1 = call i8* @rt_create_aggr_ht(i64 40, i64 4)
  %2 = bitcast i8* %1 to { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }*
  %3 = getelementptr { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }, { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %2, i64 0, i32 4
  store { { i1, i64 } } { { i1, i64 } { i1 true, i64 undef } }, { { i1, i64 } }* %3, align 4
  ret { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %2
}

define { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* @pipeline_fn_3_main_0({ i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %0, { i8*, i64, i64, i64 }* %1, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %2, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %3, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %4, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %5) {
  %.elt = getelementptr inbounds { i8*, i64, i64, i64 }, { i8*, i64, i64, i64 }* %1, i64 0, i32 0
  %.unpack = load i8*, i8** %.elt, align 8
  %.elt1 = getelementptr inbounds { i8*, i64, i64, i64 }, { i8*, i64, i64, i64 }* %1, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.elt3 = getelementptr inbounds { i8*, i64, i64, i64 }, { i8*, i64, i64, i64 }* %1, i64 0, i32 2
  %.unpack4 = load i64, i64* %.elt3, align 8
  %.elt5 = getelementptr inbounds { i8*, i64, i64, i64 }, { i8*, i64, i64, i64 }* %1, i64 0, i32 3
  %.unpack6 = load i64, i64* %.elt5, align 8
  %7 = call i8* @rt_table_chunk_iterator_init(i8* %.unpack)
  br label %8

8:                                                ; preds = %115, %6
  %9 = phi i8* [ %116, %115 ], [ %7, %6 ]
  %10 = call i1 @rt_table_chunk_iterator_valid(i8* %9)
  br i1 %10, label %11, label %117

11:                                               ; preds = %8
  %12 = call i8* @rt_table_chunk_iterator_curr(i8* %9)
  %13 = call i8* @rt_table_chunk_get_column_buffer(i8* %12, i64 %.unpack2, i64 1)
  %14 = bitcast i8* %13 to i32*
  %15 = call i8* @rt_table_chunk_get_column_buffer(i8* %12, i64 %.unpack4, i64 1)
  %16 = bitcast i8* %15 to i32*
  %17 = call i8* @rt_table_chunk_get_column_buffer(i8* %12, i64 %.unpack6, i64 1)
  %18 = bitcast i8* %17 to i128*
  %19 = call i64 @rt_table_chunk_num_rows(i8* %12)
  br label %20

20:                                               ; preds = %113, %11
  %21 = phi i64 [ %114, %113 ], [ 0, %11 ]
  %22 = icmp slt i64 %21, %19
  br i1 %22, label %23, label %115

23:                                               ; preds = %20
  %24 = getelementptr i32, i32* %14, i64 %21
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr i32, i32* %16, i64 %21
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr i128, i128* %18, i64 %21
  %29 = load i128, i128* %28, align 4
  %30 = trunc i128 %29 to i64
  %.unpack12.elt = getelementptr inbounds { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %2, i64 0, i32 2, i32 0
  %.unpack12.unpack = load { i8*, { { i32 }, {} } }**, { i8*, { { i32 }, {} } }*** %.unpack12.elt, align 8
  %.elt13 = getelementptr inbounds { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %2, i64 0, i32 3
  %.unpack14 = load i64, i64* %.elt13, align 8
  %31 = sext i32 %25 to i64
  %32 = mul i64 %31, -7046029254386353067
  %33 = call i64 @llvm.bswap.i64(i64 %32)
  %34 = xor i64 %33, %32
  %35 = and i64 %.unpack14, %34
  %36 = getelementptr { i8*, { { i32 }, {} } }*, { i8*, { { i32 }, {} } }** %.unpack12.unpack, i64 %35
  br label %37

37:                                               ; preds = %111, %23
  %.in = phi { i8*, { { i32 }, {} } }** [ %112, %111 ], [ %36, %23 ]
  %38 = load { i8*, { { i32 }, {} } }*, { i8*, { { i32 }, {} } }** %.in, align 8
  %.not = icmp eq { i8*, { { i32 }, {} } }* %38, null
  br i1 %.not, label %113, label %39

39:                                               ; preds = %37
  %40 = getelementptr { i8*, { { i32 }, {} } }, { i8*, { { i32 }, {} } }* %38, i64 0, i32 1, i32 0, i32 0
  %.unpack22.unpack = load i32, i32* %40, align 4
  %41 = icmp eq i32 %.unpack22.unpack, %25
  br i1 %41, label %42, label %111

42:                                               ; preds = %39
  %.unpack31.elt = getelementptr inbounds { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %3, i64 0, i32 2, i32 0
  %.unpack31.unpack = load { i8*, { { i32 }, {} } }**, { i8*, { { i32 }, {} } }*** %.unpack31.elt, align 8
  %.elt32 = getelementptr inbounds { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %3, i64 0, i32 3
  %.unpack33 = load i64, i64* %.elt32, align 8
  %43 = sext i32 %27 to i64
  %44 = mul i64 %43, -7046029254386353067
  %45 = call i64 @llvm.bswap.i64(i64 %44)
  %46 = xor i64 %45, %44
  %47 = and i64 %.unpack33, %46
  %48 = getelementptr { i8*, { { i32 }, {} } }*, { i8*, { { i32 }, {} } }** %.unpack31.unpack, i64 %47
  br label %49

49:                                               ; preds = %109, %42
  %.in46 = phi { i8*, { { i32 }, {} } }** [ %110, %109 ], [ %48, %42 ]
  %50 = load { i8*, { { i32 }, {} } }*, { i8*, { { i32 }, {} } }** %.in46, align 8
  %.not40 = icmp eq { i8*, { { i32 }, {} } }* %50, null
  br i1 %.not40, label %111, label %51

51:                                               ; preds = %49
  %52 = getelementptr { i8*, { { i32 }, {} } }, { i8*, { { i32 }, {} } }* %50, i64 0, i32 1, i32 0, i32 0
  %.unpack42.unpack = load i32, i32* %52, align 4
  %53 = icmp eq i32 %.unpack42.unpack, %27
  br i1 %53, label %54, label %109

54:                                               ; preds = %51
  %55 = insertvalue { i32 } undef, i32 %25, 0
  %56 = getelementptr { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }, { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %0, i64 0, i32 0
  %57 = getelementptr { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }, { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %0, i64 0, i32 1
  %58 = load i64, i64* %56, align 4
  %59 = load i64, i64* %57, align 4
  %60 = icmp ult i64 %58, %59
  br i1 %60, label %63, label %61

61:                                               ; preds = %54
  %62 = bitcast { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %0 to i8*
  call void @rt_resize_aggr_ht(i8* %62, i64 40)
  %.pre = load i64, i64* %57, align 4
  br label %63

63:                                               ; preds = %54, %61
  %64 = phi i64 [ %.pre, %61 ], [ %59, %54 ]
  %.elt47 = getelementptr { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }, { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %0, i64 0, i32 3, i32 0
  %.unpack48 = load { i8*, i64, { { i32 }, { { i1, i64 } } } }**, { i8*, i64, { { i32 }, { { i1, i64 } } } }*** %.elt47, align 8
  %65 = mul i64 %64, 2
  %66 = add i64 %65, -1
  %67 = and i64 %66, %34
  %68 = getelementptr { i8*, i64, { { i32 }, { { i1, i64 } } } }*, { i8*, i64, { { i32 }, { { i1, i64 } } } }** %.unpack48, i64 %67
  br label %69

69:                                               ; preds = %106, %63
  %70 = phi { i8*, i64, { { i32 }, { { i1, i64 } } } }** [ %108, %106 ], [ %68, %63 ]
  %71 = load { i8*, i64, { { i32 }, { { i1, i64 } } } }*, { i8*, i64, { { i32 }, { { i1, i64 } } } }** %70, align 8
  %.not51 = icmp eq { i8*, i64, { { i32 }, { { i1, i64 } } } }* %71, null
  br i1 %.not51, label %93, label %72

72:                                               ; preds = %69
  %73 = getelementptr { i8*, i64, { { i32 }, { { i1, i64 } } } }, { i8*, i64, { { i32 }, { { i1, i64 } } } }* %71, i64 0, i32 1
  %74 = load i64, i64* %73, align 4
  %75 = icmp eq i64 %74, %34
  br i1 %75, label %76, label %91

76:                                               ; preds = %72
  %77 = getelementptr { i8*, i64, { { i32 }, { { i1, i64 } } } }, { i8*, i64, { { i32 }, { { i1, i64 } } } }* %71, i64 0, i32 2, i32 0, i32 0
  %.unpack64 = load i32, i32* %77, align 4
  %78 = icmp eq i32 %.unpack64, %25
  %79 = icmp ne i32 %.unpack64, %25
  br i1 %78, label %80, label %89

80:                                               ; preds = %76
  %81 = getelementptr { i8*, i64, { { i32 }, { { i1, i64 } } } }, { i8*, i64, { { i32 }, { { i1, i64 } } } }* %71, i64 0, i32 2, i32 1
  %82 = getelementptr { { i1, i64 } }, { { i1, i64 } }* %81, i64 0, i32 0
  %.unpack65 = load { i1, i64 }, { i1, i64 }* %82, align 4
  %83 = extractvalue { i1, i64 } %.unpack65, 0
  %84 = extractvalue { i1, i64 } %.unpack65, 1
  %85 = icmp sge i64 %84, %30
  %86 = insertvalue { i1, i64 } { i1 false, i64 undef }, i64 %30, 1
  %87 = select i1 %83, i1 true, i1 %85
  %88 = select i1 %87, { i1, i64 } %86, { i1, i64 } %.unpack65
  store { i1, i64 } %88, { i1, i64 }* %82, align 4
  br label %106

89:                                               ; preds = %76
  %90 = bitcast { i8*, i64, { { i32 }, { { i1, i64 } } } }* %71 to { i8*, i64, { { i32 }, { { i1, i64 } } } }**
  br label %106

91:                                               ; preds = %72
  %92 = bitcast { i8*, i64, { { i32 }, { { i1, i64 } } } }* %71 to { i8*, i64, { { i32 }, { { i1, i64 } } } }**
  br label %106

93:                                               ; preds = %69
  %94 = getelementptr { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }, { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %0, i64 0, i32 4, i32 0
  %.unpack52 = load { i1, i64 }, { i1, i64 }* %94, align 4
  %95 = extractvalue { i1, i64 } %.unpack52, 0
  %96 = extractvalue { i1, i64 } %.unpack52, 1
  %97 = icmp sge i64 %96, %30
  %98 = insertvalue { i1, i64 } { i1 false, i64 undef }, i64 %30, 1
  %99 = select i1 %95, i1 true, i1 %97
  %100 = select i1 %99, { i1, i64 } %98, { i1, i64 } %.unpack52
  %101 = insertvalue { { i1, i64 } } undef, { i1, i64 } %100, 0
  %102 = insertvalue { { i32 }, { { i1, i64 } } } undef, { i32 } %55, 0
  %103 = insertvalue { { i32 }, { { i1, i64 } } } %102, { { i1, i64 } } %101, 1
  %.elt55 = getelementptr { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }, { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %0, i64 0, i32 2, i32 0
  %.unpack56 = load { i8*, i64, { { i32 }, { { i1, i64 } } } }*, { i8*, i64, { { i32 }, { { i1, i64 } } } }** %.elt55, align 8
  %104 = getelementptr { i8*, i64, { { i32 }, { { i1, i64 } } } }, { i8*, i64, { { i32 }, { { i1, i64 } } } }* %.unpack56, i64 %58
  %.repack = getelementptr inbounds { i8*, i64, { { i32 }, { { i1, i64 } } } }, { i8*, i64, { { i32 }, { { i1, i64 } } } }* %104, i64 0, i32 0
  store i8* null, i8** %.repack, align 8
  %.repack60 = getelementptr { i8*, i64, { { i32 }, { { i1, i64 } } } }, { i8*, i64, { { i32 }, { { i1, i64 } } } }* %.unpack56, i64 %58, i32 1
  store i64 %34, i64* %.repack60, align 8
  %.repack62 = getelementptr { i8*, i64, { { i32 }, { { i1, i64 } } } }, { i8*, i64, { { i32 }, { { i1, i64 } } } }* %.unpack56, i64 %58, i32 2
  store { { i32 }, { { i1, i64 } } } %103, { { i32 }, { { i1, i64 } } }* %.repack62, align 8
  store { i8*, i64, { { i32 }, { { i1, i64 } } } }* %104, { i8*, i64, { { i32 }, { { i1, i64 } } } }** %70, align 8
  %105 = add i64 %58, 1
  store i64 %105, i64* %56, align 4
  br label %106

106:                                              ; preds = %91, %80, %89, %93
  %107 = phi i1 [ false, %93 ], [ true, %91 ], [ %79, %80 ], [ %79, %89 ]
  %108 = phi { i8*, i64, { { i32 }, { { i1, i64 } } } }** [ %70, %93 ], [ %92, %91 ], [ %70, %80 ], [ %90, %89 ]
  br i1 %107, label %69, label %109

109:                                              ; preds = %106, %51
  %110 = bitcast { i8*, { { i32 }, {} } }* %50 to { i8*, { { i32 }, {} } }**
  br label %49

111:                                              ; preds = %49, %39
  %112 = bitcast { i8*, { { i32 }, {} } }* %38 to { i8*, { { i32 }, {} } }**
  br label %37

113:                                              ; preds = %37
  %114 = add i64 %21, 1
  br label %20

115:                                              ; preds = %20
  %116 = call i8* @rt_table_chunk_iterator_next(i8* %9)
  br label %8

117:                                              ; preds = %8
  call void @rt_table_chunk_iterator_free(i8* %9)
  ret { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %0
}

; Function Attrs: noinline optnone
define { i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }* @pipeline_fn_2_init_0() #0 {
  %1 = call i8* @rt_create_vec(i64 32, i64 1024)
  %2 = bitcast i8* %1 to { i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }*
  ret { i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }* %2
}

define { i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }* @pipeline_fn_2_main_0({ i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }* %0, { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %1) {
  %.elt = getelementptr inbounds { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }, { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %1, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.unpack4.elt = getelementptr inbounds { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }, { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %1, i64 0, i32 2, i32 0
  %.unpack4.unpack = load { i8*, i64, { { i32 }, { { i1, i64 } } } }*, { i8*, i64, { { i32 }, { { i1, i64 } } } }** %.unpack4.elt, align 8
  br label %3

3:                                                ; preds = %20, %2
  %4 = phi i64 [ %22, %20 ], [ 0, %2 ]
  %5 = icmp slt i64 %4, %.unpack
  br i1 %5, label %6, label %23

6:                                                ; preds = %3
  %.elt20 = getelementptr { i8*, i64, { { i32 }, { { i1, i64 } } } }, { i8*, i64, { { i32 }, { { i1, i64 } } } }* %.unpack4.unpack, i64 %4, i32 2
  %.unpack21 = load { { i32 }, { { i1, i64 } } }, { { i32 }, { { i1, i64 } } }* %.elt20, align 8
  %7 = extractvalue { { i32 }, { { i1, i64 } } } %.unpack21, 0
  %8 = extractvalue { i32 } %7, 0
  %9 = sext i32 %8 to i64
  %10 = mul i64 %9, -7046029254386353067
  %11 = call i64 @llvm.bswap.i64(i64 %10)
  %12 = xor i64 %11, %10
  %13 = getelementptr { i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }, { i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }* %0, i64 0, i32 0
  %14 = getelementptr { i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }, { i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }* %0, i64 0, i32 1
  %15 = load i64, i64* %13, align 4
  %16 = load i64, i64* %14, align 4
  %17 = icmp ult i64 %15, %16
  br i1 %17, label %20, label %18

18:                                               ; preds = %6
  %19 = bitcast { i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }* %0 to i8*
  call void @rt_resize_vec(i8* %19)
  br label %20

20:                                               ; preds = %6, %18
  %.elt22 = getelementptr { i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }, { i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }* %0, i64 0, i32 2, i32 0
  %.unpack23 = load { i64, { { i32 }, { { i1, i64 } } } }*, { i64, { { i32 }, { { i1, i64 } } } }** %.elt22, align 8
  %.repack = getelementptr { i64, { { i32 }, { { i1, i64 } } } }, { i64, { { i32 }, { { i1, i64 } } } }* %.unpack23, i64 %15, i32 0
  store i64 %12, i64* %.repack, align 4
  %.repack27 = getelementptr { i64, { { i32 }, { { i1, i64 } } } }, { i64, { { i32 }, { { i1, i64 } } } }* %.unpack23, i64 %15, i32 1
  store { { i32 }, { { i1, i64 } } } %.unpack21, { { i32 }, { { i1, i64 } } }* %.repack27, align 4
  %21 = add i64 %15, 1
  store i64 %21, i64* %13, align 4
  %22 = add i64 %4, 1
  br label %3

23:                                               ; preds = %3
  ret { i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }* %0
}

; Function Attrs: noinline optnone
define { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* @pipeline_fn_1_init_0() #0 {
  %1 = call i8* @rt_create_vec(i64 112, i64 1024)
  %2 = bitcast i8* %1 to { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }*
  ret { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* %2
}

define { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* @pipeline_fn_1_main_0({ i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* %0, { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %1, { { { i8*, { { i32 }, { { i1, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i1, i64 } } } }**, i64 }, i64 }* %2, { { { i8*, { { i32 }, { { i1, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i1, i64 } } } }**, i64 }, i64 }* %3) {
  %5 = alloca i1, align 1
  %.elt = getelementptr inbounds { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }, { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %1, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.unpack4.elt = getelementptr inbounds { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }, { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %1, i64 0, i32 2, i32 0
  %.unpack4.unpack = load { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }** %.unpack4.elt, align 8
  br label %6

6:                                                ; preds = %63, %4
  %7 = phi i64 [ %64, %63 ], [ 0, %4 ]
  %8 = icmp slt i64 %7, %.unpack
  br i1 %8, label %9, label %65

9:                                                ; preds = %6
  %10 = getelementptr { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }, { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }* %.unpack4.unpack, i64 %7
  %11 = load { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }, { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }* %10, align 4
  %12 = extractvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %11, 0
  %13 = extractvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %11, 1
  %14 = extractvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %11, 2
  %15 = extractvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %11, 3
  %16 = extractvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %11, 4
  %17 = extractvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %11, 5
  %18 = extractvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %11, 6
  %19 = extractvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %11, 7
  %20 = extractvalue { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } } %11, 8
  store i1 false, i1* %5, align 1
  %.unpack13.elt = getelementptr inbounds { { { i8*, { { i32 }, { { i1, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i1, i64 } } } }**, i64 }, i64 }, { { { i8*, { { i32 }, { { i1, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i1, i64 } } } }**, i64 }, i64 }* %2, i64 0, i32 2, i32 0
  %.unpack13.unpack = load { i8*, { { i32 }, { { i1, i64 } } } }**, { i8*, { { i32 }, { { i1, i64 } } } }*** %.unpack13.elt, align 8
  %.elt14 = getelementptr inbounds { { { i8*, { { i32 }, { { i1, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i1, i64 } } } }**, i64 }, i64 }, { { { i8*, { { i32 }, { { i1, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i1, i64 } } } }**, i64 }, i64 }* %2, i64 0, i32 3
  %.unpack15 = load i64, i64* %.elt14, align 8
  %21 = sext i32 %17 to i64
  %22 = mul i64 %21, -7046029254386353067
  %23 = call i64 @llvm.bswap.i64(i64 %22)
  %24 = xor i64 %23, %22
  %25 = and i64 %24, %.unpack15
  %26 = getelementptr { i8*, { { i32 }, { { i1, i64 } } } }*, { i8*, { { i32 }, { { i1, i64 } } } }** %.unpack13.unpack, i64 %25
  br label %27

27:                                               ; preds = %61, %9
  %.in = phi { i8*, { { i32 }, { { i1, i64 } } } }** [ %62, %61 ], [ %26, %9 ]
  %28 = load { i8*, { { i32 }, { { i1, i64 } } } }*, { i8*, { { i32 }, { { i1, i64 } } } }** %.in, align 8
  %.not = icmp eq { i8*, { { i32 }, { { i1, i64 } } } }* %28, null
  br i1 %.not, label %63, label %29

29:                                               ; preds = %27
  %30 = getelementptr { i8*, { { i32 }, { { i1, i64 } } } }, { i8*, { { i32 }, { { i1, i64 } } } }* %28, i64 0, i32 1
  %31 = load { { i32 }, { { i1, i64 } } }, { { i32 }, { { i1, i64 } } }* %30, align 4
  %32 = extractvalue { { i32 }, { { i1, i64 } } } %31, 0
  %33 = extractvalue { { i32 }, { { i1, i64 } } } %31, 1
  %34 = extractvalue { i32 } %32, 0
  %35 = extractvalue { { i1, i64 } } %33, 0
  %36 = icmp eq i32 %17, %34
  br i1 %36, label %37, label %61

37:                                               ; preds = %29
  store i1 true, i1* %5, align 1
  %38 = extractvalue { i1, i64 } %35, 0
  %39 = extractvalue { i1, i64 } %35, 1
  %40 = icmp ne i64 %14, %39
  %41 = or i1 %38, %40
  br i1 %41, label %61, label %42

42:                                               ; preds = %37
  %43 = insertvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } undef, i64 %18, 0
  %44 = insertvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %43, { i64, i64 } %15, 1
  %45 = insertvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %44, { i64, i64 } %20, 2
  %46 = insertvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %45, i32 %17, 3
  %47 = insertvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %46, { i64, i64 } %16, 4
  %48 = insertvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %47, { i64, i64 } %13, 5
  %49 = insertvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %48, { i64, i64 } %19, 6
  %50 = insertvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %49, { i64, i64 } %12, 7
  %51 = getelementptr { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }, { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* %0, i64 0, i32 0
  %52 = getelementptr { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }, { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* %0, i64 0, i32 1
  %53 = load i64, i64* %51, align 4
  %54 = load i64, i64* %52, align 4
  %55 = icmp ult i64 %53, %54
  br i1 %55, label %58, label %56

56:                                               ; preds = %42
  %57 = bitcast { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* %0 to i8*
  call void @rt_resize_vec(i8* %57)
  br label %58

58:                                               ; preds = %42, %56
  %.elt28 = getelementptr { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }, { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* %0, i64 0, i32 2, i32 0
  %.unpack29 = load { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }** %.elt28, align 8
  %59 = getelementptr { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }, { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }* %.unpack29, i64 %53
  store { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %50, { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }* %59, align 4
  %60 = add i64 %53, 1
  store i64 %60, i64* %51, align 4
  br label %61

61:                                               ; preds = %37, %58, %29
  %62 = bitcast { i8*, { { i32 }, { { i1, i64 } } } }* %28 to { i8*, { { i32 }, { { i1, i64 } } } }**
  br label %27

63:                                               ; preds = %27
  %64 = add i64 %7, 1
  br label %6

65:                                               ; preds = %6
  ret { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* %0
}

; Function Attrs: noinline optnone
define i8* @pipeline_fn_0_init_0() #0 {
  %1 = call i8* @rt_arrow_schema_create_builder()
  %2 = call i8* @rt_arrow_type2(i32 23, i32 15, i32 2)
  call void @rt_arrow_schema_add_field(i8* %1, i8* %2, i1 false, { i64, i64 } { i64 7161109830021677065, i64 465490310243 })
  %3 = call i8* @rt_arrow_type2(i32 13, i32 0, i32 0)
  call void @rt_arrow_schema_add_field(i8* %1, i8* %3, i1 false, { i64, i64 } { i64 7020653816643059718, i64 25965 })
  %4 = call i8* @rt_arrow_type2(i32 13, i32 0, i32 0)
  call void @rt_arrow_schema_add_field(i8* %1, i8* %4, i1 false, { i64, i64 } { i64 7020653795168223238, i64 25965 })
  %5 = call i8* @rt_arrow_type2(i32 7, i32 0, i32 0)
  call void @rt_arrow_schema_add_field(i8* %1, i8* %5, i1 false, { i64, i64 } { i64 7021216753711579145, i64 521392583794 })
  %6 = call i8* @rt_arrow_type2(i32 13, i32 0, i32 0)
  call void @rt_arrow_schema_add_field(i8* %1, i8* %6, i1 false, { i64, i64 } { i64 7380660298971086854, i64 29287 })
  %7 = call i8* @rt_arrow_type2(i32 13, i32 0, i32 0)
  call void @rt_arrow_schema_add_field(i8* %1, i8* %7, i1 false, { i64, i64 } { i64 7233167424059605001, i64 495857267300 })
  %8 = call i8* @rt_arrow_type2(i32 13, i32 0, i32 0)
  call void @rt_arrow_schema_add_field(i8* %1, i8* %8, i1 false, { i64, i64 } { i64 7525619924861976583, i64 6647407 })
  %9 = call i8* @rt_arrow_type2(i32 13, i32 0, i32 0)
  call void @rt_arrow_schema_add_field(i8* %1, i8* %9, i1 false, { i64, i64 } { i64 8026363908430233609, i64 500068347245 })
  %10 = call i8* @rt_arrow_schema_build(i8* %1)
  %11 = call i8* @rt_arrow_create_table_builder(i8* %10)
  ret i8* %11
}

define i8* @pipeline_fn_0_main_0(i8* %0, { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* %1) {
  %3 = alloca i1, align 1
  store i1 false, i1* %3, align 1
  %.elt = getelementptr inbounds { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }, { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* %1, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.unpack4.elt = getelementptr inbounds { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }, { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* %1, i64 0, i32 2, i32 0
  %.unpack4.unpack = load { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }** %.unpack4.elt, align 8
  br label %4

4:                                                ; preds = %10, %2
  %5 = phi i1 [ %22, %10 ], [ false, %2 ]
  %6 = phi i64 [ %23, %10 ], [ 0, %2 ]
  %7 = phi i64 [ %21, %10 ], [ 0, %2 ]
  %8 = icmp uge i64 %6, %.unpack
  %9 = or i1 %8, %5
  br i1 %9, label %24, label %10

10:                                               ; preds = %4
  %11 = getelementptr { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }, { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }* %.unpack4.unpack, i64 %6
  %12 = load { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }, { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }* %11, align 4
  %13 = extractvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %12, 0
  %14 = extractvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %12, 1
  %15 = extractvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %12, 2
  %16 = extractvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %12, 3
  %17 = extractvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %12, 4
  %18 = extractvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %12, 5
  %19 = extractvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %12, 6
  %20 = extractvalue { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } } %12, 7
  call void @rt_table_builder_add_small_decimal(i8* %0, i32 0, i1 false, i64 %13)
  call void @rt_table_builder_add_binary(i8* %0, i32 1, i1 false, { i64, i64 } %14)
  call void @rt_table_builder_add_binary(i8* %0, i32 2, i1 false, { i64, i64 } %15)
  call void @rt_table_builder_add_int_32(i8* %0, i32 3, i1 false, i32 %16)
  call void @rt_table_builder_add_binary(i8* %0, i32 4, i1 false, { i64, i64 } %17)
  call void @rt_table_builder_add_binary(i8* %0, i32 5, i1 false, { i64, i64 } %18)
  call void @rt_table_builder_add_binary(i8* %0, i32 6, i1 false, { i64, i64 } %19)
  call void @rt_table_builder_add_binary(i8* %0, i32 7, i1 false, { i64, i64 } %20)
  call void @rt_table_builder_finish_row(i8* %0)
  %21 = add i64 %7, 1
  %22 = icmp sgt i64 %21, 99
  store i1 %22, i1* %3, align 1
  %23 = add i64 %6, 1
  br label %4

24:                                               ; preds = %4
  ret i8* %0
}

; Function Attrs: noinline optnone
define i8* @main() #0 {
  %1 = call { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_6_init_0()
  %2 = call { i8*, i64, i64 }* @pipeline_fn_6_init_1()
  %3 = call { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_6_main_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %1, { i8*, i64, i64 }* %2)
  %4 = call { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* @pipeline_fn_6_finalize_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %3)
  %5 = call { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_12_init_0()
  %6 = call { i8*, i64, i64 }* @pipeline_fn_12_init_1()
  %7 = call { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_12_main_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %5, { i8*, i64, i64 }* %6)
  %8 = call { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* @pipeline_fn_12_finalize_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %7)
  %9 = call { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* @pipeline_fn_13_init_0()
  %10 = call { i8*, i64, i64, i64, i64 }* @pipeline_fn_13_init_1()
  %11 = call { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* @pipeline_fn_13_main_0({ i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %9, { i8*, i64, i64, i64, i64 }* %10)
  %12 = call { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* @pipeline_fn_13_finalize_0({ i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %11)
  %13 = call { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_5_init_0()
  %14 = call { i8*, i64, i64 }* @pipeline_fn_5_init_1()
  %15 = call { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_5_main_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %13, { i8*, i64, i64 }* %14, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %4, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %4)
  %16 = call { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* @pipeline_fn_5_finalize_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %15)
  %17 = call { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* @pipeline_fn_11_init_0()
  %18 = call { i8*, i64, i64, i64 }* @pipeline_fn_11_init_1()
  %19 = call { i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* @pipeline_fn_11_main_0({ i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %17, { i8*, i64, i64, i64 }* %18, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %8, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %8)
  %20 = call { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* @pipeline_fn_11_finalize_0({ i64, i64, { { i64, { { i32 }, { { i64, i64 } } } }*, i64 } }* %19)
  %21 = call { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_4_init_0()
  %22 = call { i8*, i64, i64 }* @pipeline_fn_4_init_1()
  %23 = call { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_4_main_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %21, { i8*, i64, i64 }* %22, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %16, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %16)
  %24 = call { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* @pipeline_fn_4_finalize_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %23)
  %25 = call { i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }* @pipeline_fn_10_init_0()
  %26 = call { i8*, i64, i64, i64, i64, i64, i64, i64 }* @pipeline_fn_10_init_1()
  %27 = call { i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }* @pipeline_fn_10_main_0({ i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }* %25, { i8*, i64, i64, i64, i64, i64, i64, i64 }* %26, { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* %20, { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* %20)
  %28 = call { { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }**, i64 }, i64 }* @pipeline_fn_10_finalize_0({ i64, i64, { { i64, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 } }* %27)
  %29 = call { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* @pipeline_fn_9_init_0()
  %30 = call { i8*, i64, i64, i64 }* @pipeline_fn_9_init_1()
  %31 = call { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* @pipeline_fn_9_main_0({ i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %29, { i8*, i64, i64, i64 }* %30, { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* %12, { { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }**, i64 }, i64 }* %28, { { { i8*, { { i32 }, { { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 } } } }**, i64 }, i64 }* %12, { { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i64, i64 }, { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 } } } }**, i64 }, i64 }* %28)
  %32 = call { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* @pipeline_fn_9_finalize_0({ i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %31)
  %33 = call { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* @pipeline_fn_8_init_0()
  %34 = call { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* @pipeline_fn_8_main_0({ i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %33, { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %32)
  %35 = call { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* @pipeline_fn_8_finalize_0({ i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %34)
  %36 = call { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_7_init_0()
  %37 = call { i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* @pipeline_fn_7_main_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %36, { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %35, { i64, i64, { { i8*, i64, { { i32 }, {} } }*, i64 }, { { i8*, i64, { { i32 }, {} } }**, i64 }, {} }* %35)
  %38 = call { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* @pipeline_fn_7_finalize_0({ i64, i64, { { i64, { { i32 }, {} } }*, i64 } }* %37)
  %39 = call { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* @pipeline_fn_3_init_0()
  %40 = call { i8*, i64, i64, i64 }* @pipeline_fn_3_init_1()
  %41 = call { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* @pipeline_fn_3_main_0({ i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %39, { i8*, i64, i64, i64 }* %40, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %38, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %24, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %38, { { { i8*, { { i32 }, {} } }*, i64 }, i64, { { i8*, { { i32 }, {} } }**, i64 }, i64 }* %24)
  %42 = call { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* @pipeline_fn_3_finalize_0({ i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %41)
  %43 = call { i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }* @pipeline_fn_2_init_0()
  %44 = call { i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }* @pipeline_fn_2_main_0({ i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }* %43, { i64, i64, { { i8*, i64, { { i32 }, { { i1, i64 } } } }*, i64 }, { { i8*, i64, { { i32 }, { { i1, i64 } } } }**, i64 }, { { i1, i64 } } }* %42)
  %45 = call { { { i8*, { { i32 }, { { i1, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i1, i64 } } } }**, i64 }, i64 }* @pipeline_fn_2_finalize_0({ i64, i64, { { i64, { { i32 }, { { i1, i64 } } } }*, i64 } }* %44)
  %46 = call { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* @pipeline_fn_1_init_0()
  %47 = call { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* @pipeline_fn_1_main_0({ i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* %46, { i64, i64, { { { i64, i64 }, { i64, i64 }, i64, { i64, i64 }, { i64, i64 }, i32, i64, { i64, i64 }, { i64, i64 } }*, i64 } }* %32, { { { i8*, { { i32 }, { { i1, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i1, i64 } } } }**, i64 }, i64 }* %45, { { { i8*, { { i32 }, { { i1, i64 } } } }*, i64 }, i64, { { i8*, { { i32 }, { { i1, i64 } } } }**, i64 }, i64 }* %45)
  %48 = call { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* @pipeline_fn_1_finalize_0({ i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* %47)
  %49 = call i8* @pipeline_fn_0_init_0()
  %50 = call i8* @pipeline_fn_0_main_0(i8* %49, { i64, i64, { { i64, { i64, i64 }, { i64, i64 }, i32, { i64, i64 }, { i64, i64 }, { i64, i64 }, { i64, i64 } }*, i64 } }* %48)
  %51 = call i8* @pipeline_fn_0_finalize_0(i8* %50)
  ret i8* %51
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.bswap.i64(i64 %0) #1

; Function Attrs: alwaysinline mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define dso_local void @rt_set_execution_context(i8* %0) #2 {
  store i8* %0, i8** @execution_context, align 8, !tbaa !6
  ret void
}

; Function Attrs: alwaysinline mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local i8* @rt_get_execution_context() #3 {
  %1 = load i8*, i8** @execution_context, align 8, !tbaa !6
  ret i8* %1
}

attributes #0 = { noinline optnone }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { alwaysinline mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }
attributes #3 = { alwaysinline mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4}
!llvm.ident = !{!5, !5}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "mlir", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!1 = !DIFile(filename: "LLVMDialectModule", directory: "/")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 7, !"uwtable", i32 1}
!5 = !{!"Ubuntu clang version 13.0.0-2"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C++ TBAA"}
